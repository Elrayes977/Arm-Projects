
ARM_Labs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001000  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001130  08001130  00011130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001178  08001178  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001178  08001178  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001178  08001178  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001178  08001178  00011178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800117c  0800117c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001180  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000004  08001184  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08001184  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000021f7  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008b8  00000000  00000000  00022224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00022ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000220  00000000  00000000  00022d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011c2  00000000  00000000  00022fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c18  00000000  00000000  0002416a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004fb9  00000000  00000000  00025d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002ad3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008a0  00000000  00000000  0002ad90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08001118 	.word	0x08001118

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08001118 	.word	0x08001118

08000170 <main>:




void main(void)
{
 8000170:	b5b0      	push	{r4, r5, r7, lr}
 8000172:	b094      	sub	sp, #80	; 0x50
 8000174:	af00      	add	r7, sp, #0

u8 arr[8]={55, 24, 36, 66, 126, 66, 66, 0};
 8000176:	4a68      	ldr	r2, [pc, #416]	; (8000318 <main+0x1a8>)
 8000178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800017c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000180:	e883 0003 	stmia.w	r3, {r0, r1}
u64 arr2[8]={0, 553233, 1348243, 2266197, 4102105, 2266193, 2258001, 0};
 8000184:	4b65      	ldr	r3, [pc, #404]	; (800031c <main+0x1ac>)
 8000186:	463c      	mov	r4, r7
 8000188:	461d      	mov	r5, r3
 800018a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800018c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800018e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000196:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800019a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}



    RCC_voidInitSystemClock();
 800019e:	f000 fe9b 	bl	8000ed8 <RCC_voidInitSystemClock>
    //RCC GPIO
    RCC_voidEnablePeriphralCLK(APB2_IOPAEN);
 80001a2:	20ca      	movs	r0, #202	; 0xca
 80001a4:	f000 fea6 	bl	8000ef4 <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPBEN);
 80001a8:	20cb      	movs	r0, #203	; 0xcb
 80001aa:	f000 fea3 	bl	8000ef4 <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPCEN);
 80001ae:	20cc      	movs	r0, #204	; 0xcc
 80001b0:	f000 fea0 	bl	8000ef4 <RCC_voidEnablePeriphralCLK>
	//RCC AFIO
	RCC_voidEnablePeriphralCLK(APB2_AFIOEN);
 80001b4:	20c8      	movs	r0, #200	; 0xc8
 80001b6:	f000 fe9d 	bl	8000ef4 <RCC_voidEnablePeriphralCLK>
	//Systk
	MSTK_enInit();
 80001ba:	f000 fef1 	bl	8000fa0 <MSTK_enInit>
	//NVIC
	MNVIC_u8EnableInterrupt(INTERRUPT_EXTI15_10);
 80001be:	2028      	movs	r0, #40	; 0x28
 80001c0:	f000 fe58 	bl	8000e74 <MNVIC_u8EnableInterrupt>
	 //AFIO Set EXTI in port b
	AFIO_u8SetEXTIConfiguration(AFIO_EXTI_11,AFIO_GPIOB);
 80001c4:	2101      	movs	r1, #1
 80001c6:	200b      	movs	r0, #11
 80001c8:	f000 fa92 	bl	80006f0 <AFIO_u8SetEXTIConfiguration>
	AFIO_u8SetEXTIConfiguration(AFIO_EXTI_12,AFIO_GPIOB);
 80001cc:	2101      	movs	r1, #1
 80001ce:	200c      	movs	r0, #12
 80001d0:	f000 fa8e 	bl	80006f0 <AFIO_u8SetEXTIConfiguration>
	AFIO_u8SetEXTIConfiguration(AFIO_EXTI_13,AFIO_GPIOB);
 80001d4:	2101      	movs	r1, #1
 80001d6:	200d      	movs	r0, #13
 80001d8:	f000 fa8a 	bl	80006f0 <AFIO_u8SetEXTIConfiguration>
	AFIO_u8SetEXTIConfiguration(AFIO_EXTI_14,AFIO_GPIOB);
 80001dc:	2101      	movs	r1, #1
 80001de:	200e      	movs	r0, #14
 80001e0:	f000 fa86 	bl	80006f0 <AFIO_u8SetEXTIConfiguration>
	//EXTI init
	MEXTI_enInit(EXTI_11);
 80001e4:	200b      	movs	r0, #11
 80001e6:	f000 fae3 	bl	80007b0 <MEXTI_enInit>
	MEXTI_enInit(EXTI_12);
 80001ea:	200c      	movs	r0, #12
 80001ec:	f000 fae0 	bl	80007b0 <MEXTI_enInit>
	MEXTI_enInit(EXTI_13);
 80001f0:	200d      	movs	r0, #13
 80001f2:	f000 fadd 	bl	80007b0 <MEXTI_enInit>
	MEXTI_enInit(EXTI_14);
 80001f6:	200e      	movs	r0, #14
 80001f8:	f000 fada 	bl	80007b0 <MEXTI_enInit>
	//EXTI set latch
	MEXTI_enSetSignalLatch(EXTI_11, RISING_EDGE);
 80001fc:	2100      	movs	r1, #0
 80001fe:	200b      	movs	r0, #11
 8000200:	f000 faf6 	bl	80007f0 <MEXTI_enSetSignalLatch>
	MEXTI_enSetSignalLatch(EXTI_12, RISING_EDGE);
 8000204:	2100      	movs	r1, #0
 8000206:	200c      	movs	r0, #12
 8000208:	f000 faf2 	bl	80007f0 <MEXTI_enSetSignalLatch>
	MEXTI_enSetSignalLatch(EXTI_13, RISING_EDGE);
 800020c:	2100      	movs	r1, #0
 800020e:	200d      	movs	r0, #13
 8000210:	f000 faee 	bl	80007f0 <MEXTI_enSetSignalLatch>
	MEXTI_enSetSignalLatch(EXTI_14, RISING_EDGE);
 8000214:	2100      	movs	r1, #0
 8000216:	200e      	movs	r0, #14
 8000218:	f000 faea 	bl	80007f0 <MEXTI_enSetSignalLatch>
	//EXTI callback fun
	MEXTI_enSetCallBackFunc(EXTI_11, &Interrupt0_func);
 800021c:	4940      	ldr	r1, [pc, #256]	; (8000320 <main+0x1b0>)
 800021e:	200b      	movs	r0, #11
 8000220:	f000 fb34 	bl	800088c <MEXTI_enSetCallBackFunc>
	MEXTI_enSetCallBackFunc(EXTI_12, &Interrupt1_func);
 8000224:	493f      	ldr	r1, [pc, #252]	; (8000324 <main+0x1b4>)
 8000226:	200c      	movs	r0, #12
 8000228:	f000 fb30 	bl	800088c <MEXTI_enSetCallBackFunc>
	MEXTI_enSetCallBackFunc(EXTI_13, &Interrupt2_func);
 800022c:	493e      	ldr	r1, [pc, #248]	; (8000328 <main+0x1b8>)
 800022e:	200d      	movs	r0, #13
 8000230:	f000 fb2c 	bl	800088c <MEXTI_enSetCallBackFunc>
	MEXTI_enSetCallBackFunc(EXTI_14, &Interrupt3_func);
 8000234:	493d      	ldr	r1, [pc, #244]	; (800032c <main+0x1bc>)
 8000236:	200e      	movs	r0, #14
 8000238:	f000 fb28 	bl	800088c <MEXTI_enSetCallBackFunc>

	//GPIO
	MGPIO_enSetPinDirection(PC13, GPIO_u8OUT_PUSH_PULL_2MHZ);
 800023c:	2102      	movs	r1, #2
 800023e:	f240 1039 	movw	r0, #313	; 0x139
 8000242:	f000 fc3d 	bl	8000ac0 <MGPIO_enSetPinDirection>

	MGPIO_enSetPinDirection(PA10, GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000246:	2102      	movs	r1, #2
 8000248:	206e      	movs	r0, #110	; 0x6e
 800024a:	f000 fc39 	bl	8000ac0 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PA11, GPIO_u8OUT_PUSH_PULL_2MHZ);
 800024e:	2102      	movs	r1, #2
 8000250:	206f      	movs	r0, #111	; 0x6f
 8000252:	f000 fc35 	bl	8000ac0 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PA12, GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000256:	2102      	movs	r1, #2
 8000258:	2070      	movs	r0, #112	; 0x70
 800025a:	f000 fc31 	bl	8000ac0 <MGPIO_enSetPinDirection>
	//input
	MGPIO_enSetPinDirection(PB11, GPIO_u8INPUT_PULL_UP_DOWN);
 800025e:	2108      	movs	r1, #8
 8000260:	20d3      	movs	r0, #211	; 0xd3
 8000262:	f000 fc2d 	bl	8000ac0 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PB12, GPIO_u8INPUT_PULL_UP_DOWN);
 8000266:	2108      	movs	r1, #8
 8000268:	20d4      	movs	r0, #212	; 0xd4
 800026a:	f000 fc29 	bl	8000ac0 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PB13, GPIO_u8INPUT_PULL_UP_DOWN);
 800026e:	2108      	movs	r1, #8
 8000270:	20d5      	movs	r0, #213	; 0xd5
 8000272:	f000 fc25 	bl	8000ac0 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PB14, GPIO_u8INPUT_PULL_UP_DOWN);
 8000276:	2108      	movs	r1, #8
 8000278:	20d6      	movs	r0, #214	; 0xd6
 800027a:	f000 fc21 	bl	8000ac0 <MGPIO_enSetPinDirection>
	//
	MGPIO_enSetPinValue(PB11, GPIO_u8LOW);
 800027e:	2100      	movs	r1, #0
 8000280:	20d3      	movs	r0, #211	; 0xd3
 8000282:	f000 fd09 	bl	8000c98 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(PB12, GPIO_u8LOW);
 8000286:	2100      	movs	r1, #0
 8000288:	20d4      	movs	r0, #212	; 0xd4
 800028a:	f000 fd05 	bl	8000c98 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(PB13, GPIO_u8LOW);
 800028e:	2100      	movs	r1, #0
 8000290:	20d5      	movs	r0, #213	; 0xd5
 8000292:	f000 fd01 	bl	8000c98 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(PB14, GPIO_u8LOW);
 8000296:	2100      	movs	r1, #0
 8000298:	20d6      	movs	r0, #214	; 0xd6
 800029a:	f000 fcfd 	bl	8000c98 <MGPIO_enSetPinValue>
	//LED Matrix
	HLEDMRX_voidInit();
 800029e:	f000 f89f 	bl	80003e0 <HLEDMRX_voidInit>

	//u8 value=1;
	  MGPIO_enSetPinValue(PC13, GPIO_u8HIGH);
 80002a2:	2101      	movs	r1, #1
 80002a4:	f240 1039 	movw	r0, #313	; 0x139
 80002a8:	f000 fcf6 	bl	8000c98 <MGPIO_enSetPinValue>
	  MGPIO_enSetPinValue(PA10, GPIO_u8LOW);
 80002ac:	2100      	movs	r1, #0
 80002ae:	206e      	movs	r0, #110	; 0x6e
 80002b0:	f000 fcf2 	bl	8000c98 <MGPIO_enSetPinValue>
	  MGPIO_enSetPinValue(PA11, GPIO_u8LOW);
 80002b4:	2100      	movs	r1, #0
 80002b6:	206f      	movs	r0, #111	; 0x6f
 80002b8:	f000 fcee 	bl	8000c98 <MGPIO_enSetPinValue>
	  MGPIO_enSetPinValue(PA12, GPIO_u8LOW);
 80002bc:	2100      	movs	r1, #0
 80002be:	2070      	movs	r0, #112	; 0x70
 80002c0:	f000 fcea 	bl	8000c98 <MGPIO_enSetPinValue>
	  u8 i=0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  while(1){

	//HLEDMRX_voidShiftDIsplay(arr2,Global_speed);


	  HLEDMRX_voidControlDisplay(arr2,i,Global_speed);
 80002ca:	4b19      	ldr	r3, [pc, #100]	; (8000330 <main+0x1c0>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b25b      	sxtb	r3, r3
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 80002d6:	463b      	mov	r3, r7
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f8c5 	bl	8000468 <HLEDMRX_voidControlDisplay>

	 if(Global_Status==1)
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <main+0x1c4>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d1f0      	bne.n	80002ca <main+0x15a>
	 {
	i++;
 80002e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80002ec:	3301      	adds	r3, #1
 80002ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	i=i%45;
 80002f2:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <main+0x1c8>)
 80002f8:	fba3 2301 	umull	r2, r3, r3, r1
 80002fc:	1aca      	subs	r2, r1, r3
 80002fe:	0852      	lsrs	r2, r2, #1
 8000300:	4413      	add	r3, r2
 8000302:	095a      	lsrs	r2, r3, #5
 8000304:	4613      	mov	r3, r2
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	4413      	add	r3, r2
 800030a:	011a      	lsls	r2, r3, #4
 800030c:	1ad2      	subs	r2, r2, r3
 800030e:	1a8b      	subs	r3, r1, r2
 8000310:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  HLEDMRX_voidControlDisplay(arr2,i,Global_speed);
 8000314:	e7d9      	b.n	80002ca <main+0x15a>
 8000316:	bf00      	nop
 8000318:	08001130 	.word	0x08001130
 800031c:	08001138 	.word	0x08001138
 8000320:	0800033d 	.word	0x0800033d
 8000324:	08000359 	.word	0x08000359
 8000328:	08000371 	.word	0x08000371
 800032c:	080003a9 	.word	0x080003a9
 8000330:	20000000 	.word	0x20000000
 8000334:	20000001 	.word	0x20000001
 8000338:	6c16c16d 	.word	0x6c16c16d

0800033c <Interrupt0_func>:



}
void Interrupt0_func(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	 Global_Status=1;
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <Interrupt0_func+0x18>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
	 MGPIO_enTogglePin(PC13);
 8000346:	f240 1039 	movw	r0, #313	; 0x139
 800034a:	f000 fd3d 	bl	8000dc8 <MGPIO_enTogglePin>


}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000001 	.word	0x20000001

08000358 <Interrupt1_func>:
void Interrupt1_func(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	 Global_Status=0;
 800035c:	4b03      	ldr	r3, [pc, #12]	; (800036c <Interrupt1_func+0x14>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
	 MGPIO_enTogglePin(PA10);
 8000362:	206e      	movs	r0, #110	; 0x6e
 8000364:	f000 fd30 	bl	8000dc8 <MGPIO_enTogglePin>

}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000001 	.word	0x20000001

08000370 <Interrupt2_func>:
void Interrupt2_func(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	if(Global_speed<33)
 8000374:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <Interrupt2_func+0x34>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b25b      	sxtb	r3, r3
 800037a:	2b20      	cmp	r3, #32
 800037c:	dc09      	bgt.n	8000392 <Interrupt2_func+0x22>
	{
	Global_speed+=3;
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <Interrupt2_func+0x34>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	b25b      	sxtb	r3, r3
 8000384:	b2db      	uxtb	r3, r3
 8000386:	3303      	adds	r3, #3
 8000388:	b2db      	uxtb	r3, r3
 800038a:	b25a      	sxtb	r2, r3
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <Interrupt2_func+0x34>)
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	e002      	b.n	8000398 <Interrupt2_func+0x28>
	}
	else
	{
		Global_speed=33;
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <Interrupt2_func+0x34>)
 8000394:	2221      	movs	r2, #33	; 0x21
 8000396:	701a      	strb	r2, [r3, #0]
	}
	MGPIO_enTogglePin(PA12);
 8000398:	2070      	movs	r0, #112	; 0x70
 800039a:	f000 fd15 	bl	8000dc8 <MGPIO_enTogglePin>
	// MSTK_enSetBusyWait(100);
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000

080003a8 <Interrupt3_func>:
void Interrupt3_func(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	MGPIO_enTogglePin(PA11);
 80003ac:	206f      	movs	r0, #111	; 0x6f
 80003ae:	f000 fd0b 	bl	8000dc8 <MGPIO_enTogglePin>
	// MSTK_enSetBusyWait(100);
	if(Global_speed>6)
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <Interrupt3_func+0x34>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	dd09      	ble.n	80003d0 <Interrupt3_func+0x28>
	{
	Global_speed-=3;
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <Interrupt3_func+0x34>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	b25b      	sxtb	r3, r3
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	3b03      	subs	r3, #3
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	b25a      	sxtb	r2, r3
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <Interrupt3_func+0x34>)
 80003cc:	701a      	strb	r2, [r3, #0]
	else
	{
		Global_speed=6;

	}
}
 80003ce:	e002      	b.n	80003d6 <Interrupt3_func+0x2e>
		Global_speed=6;
 80003d0:	4b02      	ldr	r3, [pc, #8]	; (80003dc <Interrupt3_func+0x34>)
 80003d2:	2206      	movs	r2, #6
 80003d4:	701a      	strb	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000000 	.word	0x20000000

080003e0 <HLEDMRX_voidInit>:
#include "HLEDMRX_config.h"
#include "HLED_int.h"

u8 arrColPins[8]={PB0,PB1, PB5, PB6 ,PB7 ,PB8 ,PB9 ,PB10};
void HLEDMRX_voidInit(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

//rows
MGPIO_enSetPinDirection(LEDMRX_u8ROW0,GPIO_u8OUT_PUSH_PULL_2MHZ);
 80003e4:	2102      	movs	r1, #2
 80003e6:	2064      	movs	r0, #100	; 0x64
 80003e8:	f000 fb6a 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW1,GPIO_u8OUT_PUSH_PULL_2MHZ);
 80003ec:	2102      	movs	r1, #2
 80003ee:	2065      	movs	r0, #101	; 0x65
 80003f0:	f000 fb66 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW2,GPIO_u8OUT_PUSH_PULL_2MHZ);
 80003f4:	2102      	movs	r1, #2
 80003f6:	2066      	movs	r0, #102	; 0x66
 80003f8:	f000 fb62 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW3,GPIO_u8OUT_PUSH_PULL_2MHZ);
 80003fc:	2102      	movs	r1, #2
 80003fe:	2067      	movs	r0, #103	; 0x67
 8000400:	f000 fb5e 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW4,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000404:	2102      	movs	r1, #2
 8000406:	2068      	movs	r0, #104	; 0x68
 8000408:	f000 fb5a 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW5,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800040c:	2102      	movs	r1, #2
 800040e:	2069      	movs	r0, #105	; 0x69
 8000410:	f000 fb56 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW6,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000414:	2102      	movs	r1, #2
 8000416:	206a      	movs	r0, #106	; 0x6a
 8000418:	f000 fb52 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW7,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800041c:	2102      	movs	r1, #2
 800041e:	206b      	movs	r0, #107	; 0x6b
 8000420:	f000 fb4e 	bl	8000ac0 <MGPIO_enSetPinDirection>
//col
MGPIO_enSetPinDirection(LEDMRX_u8COL0,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000424:	2102      	movs	r1, #2
 8000426:	20c8      	movs	r0, #200	; 0xc8
 8000428:	f000 fb4a 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL1,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800042c:	2102      	movs	r1, #2
 800042e:	20c9      	movs	r0, #201	; 0xc9
 8000430:	f000 fb46 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL2,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000434:	2102      	movs	r1, #2
 8000436:	20cd      	movs	r0, #205	; 0xcd
 8000438:	f000 fb42 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL3,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800043c:	2102      	movs	r1, #2
 800043e:	20ce      	movs	r0, #206	; 0xce
 8000440:	f000 fb3e 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL4,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000444:	2102      	movs	r1, #2
 8000446:	20cf      	movs	r0, #207	; 0xcf
 8000448:	f000 fb3a 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL5,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800044c:	2102      	movs	r1, #2
 800044e:	20d0      	movs	r0, #208	; 0xd0
 8000450:	f000 fb36 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL6,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000454:	2102      	movs	r1, #2
 8000456:	20d1      	movs	r0, #209	; 0xd1
 8000458:	f000 fb32 	bl	8000ac0 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL7,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800045c:	2102      	movs	r1, #2
 800045e:	20d2      	movs	r0, #210	; 0xd2
 8000460:	f000 fb2e 	bl	8000ac0 <MGPIO_enSetPinDirection>
//disable all colomns
//LEDMRX_voidDisableALLColumns();
//disable all rows
//LEDMRX_voidDisableALLRow();

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}

08000468 <HLEDMRX_voidControlDisplay>:


void HLEDMRX_voidControlDisplay(u64 *Copy_pu8Data,u8 Index,u8 speed)
{
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	b095      	sub	sp, #84	; 0x54
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]
 8000474:	4613      	mov	r3, r2
 8000476:	70bb      	strb	r3, [r7, #2]



	u64 arr[8];
		for(u8 z=0;z<8;z++)
 8000478:	2300      	movs	r3, #0
 800047a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800047e:	e024      	b.n	80004ca <HLEDMRX_voidControlDisplay+0x62>
		{
			arr[z]=Copy_pu8Data[z]>>Index;
 8000480:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	4413      	add	r3, r2
 800048a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800048e:	78f9      	ldrb	r1, [r7, #3]
 8000490:	f897 c04f 	ldrb.w	ip, [r7, #79]	; 0x4f
 8000494:	f1c1 0620 	rsb	r6, r1, #32
 8000498:	f1a1 0020 	sub.w	r0, r1, #32
 800049c:	fa22 f401 	lsr.w	r4, r2, r1
 80004a0:	fa03 f606 	lsl.w	r6, r3, r6
 80004a4:	4334      	orrs	r4, r6
 80004a6:	fa23 f000 	lsr.w	r0, r3, r0
 80004aa:	4304      	orrs	r4, r0
 80004ac:	fa23 f501 	lsr.w	r5, r3, r1
 80004b0:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80004b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80004b8:	4413      	add	r3, r2
 80004ba:	3b48      	subs	r3, #72	; 0x48
 80004bc:	e9c3 4500 	strd	r4, r5, [r3]
		for(u8 z=0;z<8;z++)
 80004c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004c4:	3301      	adds	r3, #1
 80004c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80004ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004ce:	2b07      	cmp	r3, #7
 80004d0:	d9d6      	bls.n	8000480 <HLEDMRX_voidControlDisplay+0x18>
		arr[j]<<=7;

	}
	*/

		for(u8 j=0;j<speed;j++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80004d8:	e07c      	b.n	80005d4 <HLEDMRX_voidControlDisplay+0x16c>
		{

			/*****************col[0]************************/
			/*Disable all columns*/
				LEDMRX_voidDisableALLColumns();
 80004da:	f000 f886 	bl	80005ea <LEDMRX_voidDisableALLColumns>
			/*set Value*/
				LEDMRX_voidSetRowValues(arr[0]);
 80004de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80004e2:	b2d3      	uxtb	r3, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 f8a4 	bl	8000632 <LEDMRX_voidSetRowValues>
			/*Enable col 0 */
			MGPIO_enSetPinValue(LEDMRX_u8COL0, GPIO_u8LOW);
 80004ea:	2100      	movs	r1, #0
 80004ec:	20c8      	movs	r0, #200	; 0xc8
 80004ee:	f000 fbd3 	bl	8000c98 <MGPIO_enSetPinValue>
			MSTK_enSetBusyWait(2);
 80004f2:	2002      	movs	r0, #2
 80004f4:	f000 fd68 	bl	8000fc8 <MSTK_enSetBusyWait>
			/*****************col[1]************************/
			/*Disable all columns*/
				LEDMRX_voidDisableALLColumns();
 80004f8:	f000 f877 	bl	80005ea <LEDMRX_voidDisableALLColumns>
			/*set Value*/
				LEDMRX_voidSetRowValues(arr[1]);
 80004fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000500:	b2d3      	uxtb	r3, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f895 	bl	8000632 <LEDMRX_voidSetRowValues>
			/*Enable col 0 */
			MGPIO_enSetPinValue(LEDMRX_u8COL1, GPIO_u8LOW);
 8000508:	2100      	movs	r1, #0
 800050a:	20c9      	movs	r0, #201	; 0xc9
 800050c:	f000 fbc4 	bl	8000c98 <MGPIO_enSetPinValue>
			MSTK_enSetBusyWait(2);
 8000510:	2002      	movs	r0, #2
 8000512:	f000 fd59 	bl	8000fc8 <MSTK_enSetBusyWait>
			/*****************col[2]************************/
			/*Disable all columns*/
				LEDMRX_voidDisableALLColumns();
 8000516:	f000 f868 	bl	80005ea <LEDMRX_voidDisableALLColumns>
			/*set Value*/
				LEDMRX_voidSetRowValues(arr[2]);
 800051a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800051e:	b2d3      	uxtb	r3, r2
 8000520:	4618      	mov	r0, r3
 8000522:	f000 f886 	bl	8000632 <LEDMRX_voidSetRowValues>
			/*Enable col 0 */
			MGPIO_enSetPinValue(LEDMRX_u8COL2, GPIO_u8LOW);
 8000526:	2100      	movs	r1, #0
 8000528:	20cd      	movs	r0, #205	; 0xcd
 800052a:	f000 fbb5 	bl	8000c98 <MGPIO_enSetPinValue>
			MSTK_enSetBusyWait(2);
 800052e:	2002      	movs	r0, #2
 8000530:	f000 fd4a 	bl	8000fc8 <MSTK_enSetBusyWait>
			/*****************col[3]************************/
			/*Disable all columns*/
				LEDMRX_voidDisableALLColumns();
 8000534:	f000 f859 	bl	80005ea <LEDMRX_voidDisableALLColumns>
			/*set Value*/
				LEDMRX_voidSetRowValues(arr[3]);
 8000538:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800053c:	b2d3      	uxtb	r3, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f877 	bl	8000632 <LEDMRX_voidSetRowValues>
			/*Enable col 0 */
			MGPIO_enSetPinValue(LEDMRX_u8COL3, GPIO_u8LOW);
 8000544:	2100      	movs	r1, #0
 8000546:	20ce      	movs	r0, #206	; 0xce
 8000548:	f000 fba6 	bl	8000c98 <MGPIO_enSetPinValue>
			MSTK_enSetBusyWait(2);
 800054c:	2002      	movs	r0, #2
 800054e:	f000 fd3b 	bl	8000fc8 <MSTK_enSetBusyWait>
			/*****************col[4]************************/
			/*Disable all columns*/
				LEDMRX_voidDisableALLColumns();
 8000552:	f000 f84a 	bl	80005ea <LEDMRX_voidDisableALLColumns>
			/*set Value*/
				LEDMRX_voidSetRowValues(arr[4]);
 8000556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800055a:	b2d3      	uxtb	r3, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f868 	bl	8000632 <LEDMRX_voidSetRowValues>
			/*Enable col 0 */
			MGPIO_enSetPinValue(LEDMRX_u8COL4, GPIO_u8LOW);
 8000562:	2100      	movs	r1, #0
 8000564:	20cf      	movs	r0, #207	; 0xcf
 8000566:	f000 fb97 	bl	8000c98 <MGPIO_enSetPinValue>
			MSTK_enSetBusyWait(2);
 800056a:	2002      	movs	r0, #2
 800056c:	f000 fd2c 	bl	8000fc8 <MSTK_enSetBusyWait>
			/*****************col[5]************************/
			/*Disable all columns*/
				LEDMRX_voidDisableALLColumns();
 8000570:	f000 f83b 	bl	80005ea <LEDMRX_voidDisableALLColumns>
			/*set Value*/
				LEDMRX_voidSetRowValues(arr[5]);
 8000574:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000578:	b2d3      	uxtb	r3, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f859 	bl	8000632 <LEDMRX_voidSetRowValues>
			/*Enable col 0 */
			MGPIO_enSetPinValue(LEDMRX_u8COL5, GPIO_u8LOW);
 8000580:	2100      	movs	r1, #0
 8000582:	20d0      	movs	r0, #208	; 0xd0
 8000584:	f000 fb88 	bl	8000c98 <MGPIO_enSetPinValue>
			MSTK_enSetBusyWait(2);
 8000588:	2002      	movs	r0, #2
 800058a:	f000 fd1d 	bl	8000fc8 <MSTK_enSetBusyWait>
			/*****************col[6]************************/
			/*Disable all columns*/
				LEDMRX_voidDisableALLColumns();
 800058e:	f000 f82c 	bl	80005ea <LEDMRX_voidDisableALLColumns>
			/*set Value*/
				LEDMRX_voidSetRowValues(arr[6]);
 8000592:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000596:	b2d3      	uxtb	r3, r2
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f84a 	bl	8000632 <LEDMRX_voidSetRowValues>
			/*Enable col 0 */
			MGPIO_enSetPinValue(LEDMRX_u8COL6, GPIO_u8LOW);
 800059e:	2100      	movs	r1, #0
 80005a0:	20d1      	movs	r0, #209	; 0xd1
 80005a2:	f000 fb79 	bl	8000c98 <MGPIO_enSetPinValue>
			MSTK_enSetBusyWait(2);
 80005a6:	2002      	movs	r0, #2
 80005a8:	f000 fd0e 	bl	8000fc8 <MSTK_enSetBusyWait>
			/*****************col[7]************************/
			/*Disable all columns*/
				LEDMRX_voidDisableALLColumns();
 80005ac:	f000 f81d 	bl	80005ea <LEDMRX_voidDisableALLColumns>
			/*set Value*/
				LEDMRX_voidSetRowValues(arr[7]);
 80005b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80005b4:	b2d3      	uxtb	r3, r2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f83b 	bl	8000632 <LEDMRX_voidSetRowValues>
			/*Enable col 0 */
			MGPIO_enSetPinValue(LEDMRX_u8COL7, GPIO_u8LOW);
 80005bc:	2100      	movs	r1, #0
 80005be:	20d2      	movs	r0, #210	; 0xd2
 80005c0:	f000 fb6a 	bl	8000c98 <MGPIO_enSetPinValue>
			MSTK_enSetBusyWait(2);
 80005c4:	2002      	movs	r0, #2
 80005c6:	f000 fcff 	bl	8000fc8 <MSTK_enSetBusyWait>
		for(u8 j=0;j<speed;j++)
 80005ca:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80005ce:	3301      	adds	r3, #1
 80005d0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80005d4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80005d8:	78bb      	ldrb	r3, [r7, #2]
 80005da:	429a      	cmp	r2, r3
 80005dc:	f4ff af7d 	bcc.w	80004da <HLEDMRX_voidControlDisplay+0x72>





}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3754      	adds	r7, #84	; 0x54
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005ea <LEDMRX_voidDisableALLColumns>:
MGPIO_enSetPinValue(LEDMRX_u8COL7, GPIO_u8LOW);
MSTK_enSetBusyWait(2);
}

static void LEDMRX_voidDisableALLColumns(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(LEDMRX_u8COL0, GPIO_u8HIGH);
 80005ee:	2101      	movs	r1, #1
 80005f0:	20c8      	movs	r0, #200	; 0xc8
 80005f2:	f000 fb51 	bl	8000c98 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(LEDMRX_u8COL1, GPIO_u8HIGH);
 80005f6:	2101      	movs	r1, #1
 80005f8:	20c9      	movs	r0, #201	; 0xc9
 80005fa:	f000 fb4d 	bl	8000c98 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(LEDMRX_u8COL2, GPIO_u8HIGH);
 80005fe:	2101      	movs	r1, #1
 8000600:	20cd      	movs	r0, #205	; 0xcd
 8000602:	f000 fb49 	bl	8000c98 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(LEDMRX_u8COL3, GPIO_u8HIGH);
 8000606:	2101      	movs	r1, #1
 8000608:	20ce      	movs	r0, #206	; 0xce
 800060a:	f000 fb45 	bl	8000c98 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(LEDMRX_u8COL4, GPIO_u8HIGH);
 800060e:	2101      	movs	r1, #1
 8000610:	20cf      	movs	r0, #207	; 0xcf
 8000612:	f000 fb41 	bl	8000c98 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(LEDMRX_u8COL5, GPIO_u8HIGH);
 8000616:	2101      	movs	r1, #1
 8000618:	20d0      	movs	r0, #208	; 0xd0
 800061a:	f000 fb3d 	bl	8000c98 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(LEDMRX_u8COL6, GPIO_u8HIGH);
 800061e:	2101      	movs	r1, #1
 8000620:	20d1      	movs	r0, #209	; 0xd1
 8000622:	f000 fb39 	bl	8000c98 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(LEDMRX_u8COL7, GPIO_u8HIGH);
 8000626:	2101      	movs	r1, #1
 8000628:	20d2      	movs	r0, #210	; 0xd2
 800062a:	f000 fb35 	bl	8000c98 <MGPIO_enSetPinValue>


}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}

08000632 <LEDMRX_voidSetRowValues>:
static void LEDMRX_voidSetRowValues(u8 Copy_u8Data)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8BIT=0;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
	Local_u8BIT=GET_BIT(Copy_u8Data,0);
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
	MGPIO_enSetPinValue(LEDMRX_u8ROW0, Local_u8BIT);
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	4619      	mov	r1, r3
 800064c:	2064      	movs	r0, #100	; 0x64
 800064e:	f000 fb23 	bl	8000c98 <MGPIO_enSetPinValue>
	Local_u8BIT=GET_BIT(Copy_u8Data,1);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	085b      	lsrs	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
	MGPIO_enSetPinValue(LEDMRX_u8ROW1, Local_u8BIT);
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	4619      	mov	r1, r3
 8000662:	2065      	movs	r0, #101	; 0x65
 8000664:	f000 fb18 	bl	8000c98 <MGPIO_enSetPinValue>
	Local_u8BIT=GET_BIT(Copy_u8Data,2);
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	089b      	lsrs	r3, r3, #2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
	MGPIO_enSetPinValue(LEDMRX_u8ROW2, Local_u8BIT);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	4619      	mov	r1, r3
 8000678:	2066      	movs	r0, #102	; 0x66
 800067a:	f000 fb0d 	bl	8000c98 <MGPIO_enSetPinValue>
	Local_u8BIT=GET_BIT(Copy_u8Data,3);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	08db      	lsrs	r3, r3, #3
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]
	MGPIO_enSetPinValue(LEDMRX_u8ROW3, Local_u8BIT);
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	4619      	mov	r1, r3
 800068e:	2067      	movs	r0, #103	; 0x67
 8000690:	f000 fb02 	bl	8000c98 <MGPIO_enSetPinValue>
	Local_u8BIT=GET_BIT(Copy_u8Data,4);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	091b      	lsrs	r3, r3, #4
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
	MGPIO_enSetPinValue(LEDMRX_u8ROW4, Local_u8BIT);
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	4619      	mov	r1, r3
 80006a4:	2068      	movs	r0, #104	; 0x68
 80006a6:	f000 faf7 	bl	8000c98 <MGPIO_enSetPinValue>
	Local_u8BIT=GET_BIT(Copy_u8Data,5);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	095b      	lsrs	r3, r3, #5
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
	MGPIO_enSetPinValue(LEDMRX_u8ROW5, Local_u8BIT);
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	4619      	mov	r1, r3
 80006ba:	2069      	movs	r0, #105	; 0x69
 80006bc:	f000 faec 	bl	8000c98 <MGPIO_enSetPinValue>
	Local_u8BIT=GET_BIT(Copy_u8Data,6);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	099b      	lsrs	r3, r3, #6
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	73fb      	strb	r3, [r7, #15]
	MGPIO_enSetPinValue(LEDMRX_u8ROW6, Local_u8BIT);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	4619      	mov	r1, r3
 80006d0:	206a      	movs	r0, #106	; 0x6a
 80006d2:	f000 fae1 	bl	8000c98 <MGPIO_enSetPinValue>
	Local_u8BIT=GET_BIT(Copy_u8Data,7);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	09db      	lsrs	r3, r3, #7
 80006da:	73fb      	strb	r3, [r7, #15]
	MGPIO_enSetPinValue(LEDMRX_u8ROW7, Local_u8BIT);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	4619      	mov	r1, r3
 80006e0:	206b      	movs	r0, #107	; 0x6b
 80006e2:	f000 fad9 	bl	8000c98 <MGPIO_enSetPinValue>




}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <AFIO_u8SetEXTIConfiguration>:




ErrorState_t AFIO_u8SetEXTIConfiguration(AFIO_EXTI_LINE_t Copy_u8EXTILineId, u8 Copy_u8EXTIPortMap)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]




	u8 Local_u8RegIndex   = 0 ;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]
		ErrorState_t Local_u8ErrorState = SUCCES;
 8000704:	2302      	movs	r3, #2
 8000706:	73bb      	strb	r3, [r7, #14]
if(Copy_u8EXTILineId<AFIO_EXTI_NUMBER_OF_LINES){
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b0f      	cmp	r3, #15
 800070c:	d823      	bhi.n	8000756 <AFIO_u8SetEXTIConfiguration+0x66>
		if(Copy_u8EXTILineId <= 3)
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d802      	bhi.n	800071a <AFIO_u8SetEXTIConfiguration+0x2a>
		{
			Local_u8RegIndex = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e01f      	b.n	800075a <AFIO_u8SetEXTIConfiguration+0x6a>
		}
		else if(Copy_u8EXTILineId <= 7)
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b07      	cmp	r3, #7
 800071e:	d805      	bhi.n	800072c <AFIO_u8SetEXTIConfiguration+0x3c>
		{
			Local_u8RegIndex = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	73fb      	strb	r3, [r7, #15]
			Copy_u8EXTILineId = Copy_u8EXTILineId - 4;
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	3b04      	subs	r3, #4
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	e016      	b.n	800075a <AFIO_u8SetEXTIConfiguration+0x6a>
		}
		else if(Copy_u8EXTILineId <= 11)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b0b      	cmp	r3, #11
 8000730:	d805      	bhi.n	800073e <AFIO_u8SetEXTIConfiguration+0x4e>
		{
			Local_u8RegIndex = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	73fb      	strb	r3, [r7, #15]
			Copy_u8EXTILineId = Copy_u8EXTILineId - 8;
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	3b08      	subs	r3, #8
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	e00d      	b.n	800075a <AFIO_u8SetEXTIConfiguration+0x6a>
		}
		else if(Copy_u8EXTILineId <= 15)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d805      	bhi.n	8000750 <AFIO_u8SetEXTIConfiguration+0x60>
		{
			Local_u8RegIndex = 3;
 8000744:	2303      	movs	r3, #3
 8000746:	73fb      	strb	r3, [r7, #15]
			Copy_u8EXTILineId = Copy_u8EXTILineId - 12;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3b0c      	subs	r3, #12
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	e004      	b.n	800075a <AFIO_u8SetEXTIConfiguration+0x6a>

		}
		else
		{
			Local_u8ErrorState = OUT_OF_RANGE;
 8000750:	2300      	movs	r3, #0
 8000752:	73bb      	strb	r3, [r7, #14]
 8000754:	e001      	b.n	800075a <AFIO_u8SetEXTIConfiguration+0x6a>
		}
}
else{
	Local_u8ErrorState = OUT_OF_RANGE;
 8000756:	2300      	movs	r3, #0
 8000758:	73bb      	strb	r3, [r7, #14]
}

		AFIO_REG->AFIO_EXTICR[Local_u8RegIndex] &= ~((0b1111) << (Copy_u8EXTILineId * 4));
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <AFIO_u8SetEXTIConfiguration+0xbc>)
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	3302      	adds	r3, #2
 8000760:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	210f      	movs	r1, #15
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	490e      	ldr	r1, [pc, #56]	; (80007ac <AFIO_u8SetEXTIConfiguration+0xbc>)
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	4002      	ands	r2, r0
 8000778:	3302      	adds	r3, #2
 800077a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AFIO_REG->AFIO_EXTICR[Local_u8RegIndex] |=  ((Copy_u8EXTIPortMap) << (Copy_u8EXTILineId * 4));
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <AFIO_u8SetEXTIConfiguration+0xbc>)
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	3302      	adds	r3, #2
 8000784:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000788:	79b9      	ldrb	r1, [r7, #6]
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	4618      	mov	r0, r3
 8000794:	4905      	ldr	r1, [pc, #20]	; (80007ac <AFIO_u8SetEXTIConfiguration+0xbc>)
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	4302      	orrs	r2, r0
 800079a:	3302      	adds	r3, #2
 800079c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		return Local_u8ErrorState;
 80007a0:	7bbb      	ldrb	r3, [r7, #14]


}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	40010000 	.word	0x40010000

080007b0 <MEXTI_enInit>:
#include "MEXTI_int.h"

static void (*EXTI_CallBack[EXTI_NUMBER_OF_LINES])(void)= {NULL};

ErrorState_t MEXTI_enInit(EXTI_LINE_t copy_u8LineSelect)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	ErrorState_t Local_enStatuse=SUCCES;
 80007ba:	2302      	movs	r3, #2
 80007bc:	73fb      	strb	r3, [r7, #15]
	if(copy_u8LineSelect<EXTI_NUMBER_OF_LINES)
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <MEXTI_enInit+0x2a>
	{
		SET_BIT(EXTI_REG->EXTI_IMR,copy_u8LineSelect);
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MEXTI_enInit+0x3c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	2101      	movs	r1, #1
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	4611      	mov	r1, r2
 80007d2:	4a06      	ldr	r2, [pc, #24]	; (80007ec <MEXTI_enInit+0x3c>)
 80007d4:	430b      	orrs	r3, r1
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	e001      	b.n	80007de <MEXTI_enInit+0x2e>
	}
	else
	{
		Local_enStatuse=OUT_OF_RANGE;
 80007da:	2300      	movs	r3, #0
 80007dc:	73fb      	strb	r3, [r7, #15]

	}
	return Local_enStatuse;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40010400 	.word	0x40010400

080007f0 <MEXTI_enSetSignalLatch>:
				}
				return Local_enStatuse;

}
ErrorState_t MEXTI_enSetSignalLatch(EXTI_LINE_t copy_u8LineSelect,TRIG_SET_t Copy_EdgeSelect)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
	ErrorState_t Local_enStatuse=SUCCES;
 8000800:	2302      	movs	r3, #2
 8000802:	73fb      	strb	r3, [r7, #15]
	if ( copy_u8LineSelect < EXTI_NUMBER_OF_LINES) {
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b0f      	cmp	r3, #15
 8000808:	d836      	bhi.n	8000878 <MEXTI_enSetSignalLatch+0x88>
			switch (Copy_EdgeSelect) {
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d01b      	beq.n	8000848 <MEXTI_enSetSignalLatch+0x58>
 8000810:	2b02      	cmp	r3, #2
 8000812:	dc2e      	bgt.n	8000872 <MEXTI_enSetSignalLatch+0x82>
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00c      	beq.n	8000832 <MEXTI_enSetSignalLatch+0x42>
 8000818:	2b01      	cmp	r3, #1
 800081a:	d12a      	bne.n	8000872 <MEXTI_enSetSignalLatch+0x82>
			case FALING_EDGE:
				SET_BIT(EXTI_REG->EXTI_FTSR, copy_u8LineSelect);
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MEXTI_enSetSignalLatch+0x98>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	79fa      	ldrb	r2, [r7, #7]
 8000822:	2101      	movs	r1, #1
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	4611      	mov	r1, r2
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <MEXTI_enSetSignalLatch+0x98>)
 800082c:	430b      	orrs	r3, r1
 800082e:	60d3      	str	r3, [r2, #12]
				break;
 8000830:	e024      	b.n	800087c <MEXTI_enSetSignalLatch+0x8c>
			case RISING_EDGE:
				SET_BIT(EXTI_REG->EXTI_RTSR, copy_u8LineSelect);
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MEXTI_enSetSignalLatch+0x98>)
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	79fa      	ldrb	r2, [r7, #7]
 8000838:	2101      	movs	r1, #1
 800083a:	fa01 f202 	lsl.w	r2, r1, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a11      	ldr	r2, [pc, #68]	; (8000888 <MEXTI_enSetSignalLatch+0x98>)
 8000842:	430b      	orrs	r3, r1
 8000844:	6093      	str	r3, [r2, #8]
				break;
 8000846:	e019      	b.n	800087c <MEXTI_enSetSignalLatch+0x8c>
			case ANY_CHANGE:
				SET_BIT(EXTI_REG->EXTI_RTSR, copy_u8LineSelect);
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MEXTI_enSetSignalLatch+0x98>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	2101      	movs	r1, #1
 8000850:	fa01 f202 	lsl.w	r2, r1, r2
 8000854:	4611      	mov	r1, r2
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <MEXTI_enSetSignalLatch+0x98>)
 8000858:	430b      	orrs	r3, r1
 800085a:	6093      	str	r3, [r2, #8]
				SET_BIT(EXTI_REG->EXTI_FTSR, copy_u8LineSelect);
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MEXTI_enSetSignalLatch+0x98>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	79fa      	ldrb	r2, [r7, #7]
 8000862:	2101      	movs	r1, #1
 8000864:	fa01 f202 	lsl.w	r2, r1, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4a07      	ldr	r2, [pc, #28]	; (8000888 <MEXTI_enSetSignalLatch+0x98>)
 800086c:	430b      	orrs	r3, r1
 800086e:	60d3      	str	r3, [r2, #12]
				break;
 8000870:	e004      	b.n	800087c <MEXTI_enSetSignalLatch+0x8c>
			default:
				Local_enStatuse=OUT_OF_RANGE;
 8000872:	2300      	movs	r3, #0
 8000874:	73fb      	strb	r3, [r7, #15]
				break;
 8000876:	e001      	b.n	800087c <MEXTI_enSetSignalLatch+0x8c>
			}
		} else {
			Local_enStatuse=OUT_OF_RANGE;
 8000878:	2300      	movs	r3, #0
 800087a:	73fb      	strb	r3, [r7, #15]
		}
	return Local_enStatuse;
 800087c:	7bfb      	ldrb	r3, [r7, #15]

}
 800087e:	4618      	mov	r0, r3
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40010400 	.word	0x40010400

0800088c <MEXTI_enSetCallBackFunc>:

ErrorState_t MEXTI_enSetCallBackFunc(EXTI_LINE_t copy_u8LineSelect,void (*ptrfun)(void))
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
	ErrorState_t Local_enStatuse=SUCCES;
 8000898:	2302      	movs	r3, #2
 800089a:	73fb      	strb	r3, [r7, #15]
		if (*ptrfun != NULL) {
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00b      	beq.n	80008ba <MEXTI_enSetCallBackFunc+0x2e>
			if (copy_u8LineSelect <= EXTI_NUMBER_OF_LINES) {
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b10      	cmp	r3, #16
 80008a6:	d805      	bhi.n	80008b4 <MEXTI_enSetCallBackFunc+0x28>
				EXTI_CallBack[copy_u8LineSelect] = ptrfun;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4908      	ldr	r1, [pc, #32]	; (80008cc <MEXTI_enSetCallBackFunc+0x40>)
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80008b2:	e004      	b.n	80008be <MEXTI_enSetCallBackFunc+0x32>
			} else {
				Local_enStatuse=OUT_OF_RANGE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	e001      	b.n	80008be <MEXTI_enSetCallBackFunc+0x32>
			}
		} else {
			Local_enStatuse=NULL_PTR_ERR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
		}
		return Local_enStatuse;
 80008be:	7bfb      	ldrb	r3, [r7, #15]



}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000020 	.word	0x20000020

080008d0 <EXTI_ClearPendingBit>:

void EXTI_ClearPendingBit(EXTI_LINE_t copy_u8LineSelec)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	SET_BIT( EXTI_REG->EXTI_PR , copy_u8LineSelec);
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <EXTI_ClearPendingBit+0x28>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	2101      	movs	r1, #1
 80008e2:	fa01 f202 	lsl.w	r2, r1, r2
 80008e6:	4611      	mov	r1, r2
 80008e8:	4a03      	ldr	r2, [pc, #12]	; (80008f8 <EXTI_ClearPendingBit+0x28>)
 80008ea:	430b      	orrs	r3, r1
 80008ec:	6153      	str	r3, [r2, #20]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	40010400 	.word	0x40010400

080008fc <EXTI0_IRQHandler>:
/******************************************************************/
/******************************************************************/
/******************************************************************/
// IRQS
void EXTI0_IRQHandler(void) /* EXTI Line0 interrupt */
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_0]();
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <EXTI0_IRQHandler+0x14>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4798      	blx	r3

	EXTI_ClearPendingBit(EXTI_0);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ffe2 	bl	80008d0 <EXTI_ClearPendingBit>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000020 	.word	0x20000020

08000914 <EXTI1_IRQHandler>:
/* EXTI Line1 interrupt                             */
void EXTI1_IRQHandler(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_1]();
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <EXTI1_IRQHandler+0x14>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4798      	blx	r3
	EXTI_ClearPendingBit(EXTI_1);
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff ffd6 	bl	80008d0 <EXTI_ClearPendingBit>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000020 	.word	0x20000020

0800092c <EXTI2_IRQHandler>:
/* EXTI Line2 interrupt                             */
void EXTI2_IRQHandler(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_2]();
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <EXTI2_IRQHandler+0x14>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	4798      	blx	r3
	EXTI_ClearPendingBit(EXTI_2);
 8000936:	2002      	movs	r0, #2
 8000938:	f7ff ffca 	bl	80008d0 <EXTI_ClearPendingBit>

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000020 	.word	0x20000020

08000944 <EXTI3_IRQHandler>:
/* EXTI Line3 interrupt                             */
void EXTI3_IRQHandler(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_3]();
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <EXTI3_IRQHandler+0x14>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	4798      	blx	r3
	EXTI_ClearPendingBit(EXTI_3);
 800094e:	2003      	movs	r0, #3
 8000950:	f7ff ffbe 	bl	80008d0 <EXTI_ClearPendingBit>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000020 	.word	0x20000020

0800095c <EXTI4_IRQHandler>:
/* EXTI Line4 interrupt                             */
void EXTI4_IRQHandler(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	EXTI_CallBack[EXTI_4]();
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <EXTI4_IRQHandler+0x14>)
 8000962:	691b      	ldr	r3, [r3, #16]
 8000964:	4798      	blx	r3
	EXTI_ClearPendingBit(EXTI_4);
 8000966:	2004      	movs	r0, #4
 8000968:	f7ff ffb2 	bl	80008d0 <EXTI_ClearPendingBit>
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000020 	.word	0x20000020

08000974 <EXTI9_5_IRQHandler>:
/* EXTI Line9_5 interrupt */
void EXTI9_5_IRQHandler(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

	if (EXTI_CallBack[EXTI_5] != NULL) {
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <EXTI9_5_IRQHandler+0x6c>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d005      	beq.n	800098c <EXTI9_5_IRQHandler+0x18>
		EXTI_CallBack[EXTI_5]();
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <EXTI9_5_IRQHandler+0x6c>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	4798      	blx	r3
		EXTI_ClearPendingBit(EXTI_5);
 8000986:	2005      	movs	r0, #5
 8000988:	f7ff ffa2 	bl	80008d0 <EXTI_ClearPendingBit>
	}
	if (EXTI_CallBack[EXTI_6] != NULL) {
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <EXTI9_5_IRQHandler+0x6c>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d005      	beq.n	80009a0 <EXTI9_5_IRQHandler+0x2c>
		EXTI_CallBack[EXTI_6]();
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <EXTI9_5_IRQHandler+0x6c>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4798      	blx	r3
		EXTI_ClearPendingBit(EXTI_6);
 800099a:	2006      	movs	r0, #6
 800099c:	f7ff ff98 	bl	80008d0 <EXTI_ClearPendingBit>
	}
	if (EXTI_CallBack[EXTI_7] != NULL) {
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <EXTI9_5_IRQHandler+0x6c>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <EXTI9_5_IRQHandler+0x40>
		EXTI_CallBack[EXTI_7]();
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <EXTI9_5_IRQHandler+0x6c>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	4798      	blx	r3
		EXTI_ClearPendingBit(EXTI_7);
 80009ae:	2007      	movs	r0, #7
 80009b0:	f7ff ff8e 	bl	80008d0 <EXTI_ClearPendingBit>
	}
	if (EXTI_CallBack[EXTI_8] != NULL) {
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <EXTI9_5_IRQHandler+0x6c>)
 80009b6:	6a1b      	ldr	r3, [r3, #32]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <EXTI9_5_IRQHandler+0x54>
			EXTI_CallBack[EXTI_8]();
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <EXTI9_5_IRQHandler+0x6c>)
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	4798      	blx	r3
			EXTI_ClearPendingBit(EXTI_8);
 80009c2:	2008      	movs	r0, #8
 80009c4:	f7ff ff84 	bl	80008d0 <EXTI_ClearPendingBit>
		}
	if (EXTI_CallBack[EXTI_9] != NULL) {
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <EXTI9_5_IRQHandler+0x6c>)
 80009ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d005      	beq.n	80009dc <EXTI9_5_IRQHandler+0x68>
			EXTI_CallBack[EXTI_9]();
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <EXTI9_5_IRQHandler+0x6c>)
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	4798      	blx	r3
			EXTI_ClearPendingBit(EXTI_9);
 80009d6:	2009      	movs	r0, #9
 80009d8:	f7ff ff7a 	bl	80008d0 <EXTI_ClearPendingBit>
		}
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000020 	.word	0x20000020

080009e4 <EXTI15_10_IRQHandler>:

/* EXTI Line15_10 interrupt */
void EXTI15_10_IRQHandler(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	//EXTI10
	if (GET_BIT(EXTI_REG->EXTI_PR,EXTI_10)==1) {
 80009e8:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <EXTI15_10_IRQHandler+0xd4>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	0a9b      	lsrs	r3, r3, #10
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d009      	beq.n	8000a0a <EXTI15_10_IRQHandler+0x26>
		if (EXTI_CallBack[EXTI_10] != NULL)
 80009f6:	4b31      	ldr	r3, [pc, #196]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 80009f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <EXTI15_10_IRQHandler+0x20>
		{
		EXTI_CallBack[EXTI_10]();
 80009fe:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a02:	4798      	blx	r3
		}
		EXTI_ClearPendingBit(EXTI_10);
 8000a04:	200a      	movs	r0, #10
 8000a06:	f7ff ff63 	bl	80008d0 <EXTI_ClearPendingBit>
	}
	//EXTI11
	if (GET_BIT(EXTI_REG->EXTI_PR,EXTI_11)==1) {
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <EXTI15_10_IRQHandler+0xd4>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	0adb      	lsrs	r3, r3, #11
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d009      	beq.n	8000a2c <EXTI15_10_IRQHandler+0x48>
			if (EXTI_CallBack[EXTI_11] != NULL)
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <EXTI15_10_IRQHandler+0x42>
			{
			EXTI_CallBack[EXTI_11]();
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a24:	4798      	blx	r3
			}
			EXTI_ClearPendingBit(EXTI_11);
 8000a26:	200b      	movs	r0, #11
 8000a28:	f7ff ff52 	bl	80008d0 <EXTI_ClearPendingBit>
		}
	//EXTI12
	if (GET_BIT(EXTI_REG->EXTI_PR,EXTI_12)==1) {
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <EXTI15_10_IRQHandler+0xd4>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	0b1b      	lsrs	r3, r3, #12
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d009      	beq.n	8000a4e <EXTI15_10_IRQHandler+0x6a>
			if (EXTI_CallBack[EXTI_12] != NULL)
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <EXTI15_10_IRQHandler+0x64>
			{
			EXTI_CallBack[EXTI_12]();
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4798      	blx	r3
			}
			EXTI_ClearPendingBit(EXTI_12);
 8000a48:	200c      	movs	r0, #12
 8000a4a:	f7ff ff41 	bl	80008d0 <EXTI_ClearPendingBit>
		}
	//EXTI13
	if (GET_BIT(EXTI_REG->EXTI_PR,EXTI_13)==1) {
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <EXTI15_10_IRQHandler+0xd4>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	0b5b      	lsrs	r3, r3, #13
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d009      	beq.n	8000a70 <EXTI15_10_IRQHandler+0x8c>
			if (EXTI_CallBack[EXTI_13] != NULL)
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d002      	beq.n	8000a6a <EXTI15_10_IRQHandler+0x86>
			{
			EXTI_CallBack[EXTI_13]();
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a68:	4798      	blx	r3
			}
			EXTI_ClearPendingBit(EXTI_13);
 8000a6a:	200d      	movs	r0, #13
 8000a6c:	f7ff ff30 	bl	80008d0 <EXTI_ClearPendingBit>
		}
	//EXTI14
	if (GET_BIT(EXTI_REG->EXTI_PR,EXTI_14)==1) {
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <EXTI15_10_IRQHandler+0xd4>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	0b9b      	lsrs	r3, r3, #14
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d009      	beq.n	8000a92 <EXTI15_10_IRQHandler+0xae>
			if (EXTI_CallBack[EXTI_14] != NULL)
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <EXTI15_10_IRQHandler+0xa8>
			{
			EXTI_CallBack[EXTI_14]();
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a8a:	4798      	blx	r3
			}
			EXTI_ClearPendingBit(EXTI_14);
 8000a8c:	200e      	movs	r0, #14
 8000a8e:	f7ff ff1f 	bl	80008d0 <EXTI_ClearPendingBit>
		}
	//EXTI15
	if (GET_BIT(EXTI_REG->EXTI_PR,EXTI_15)==1) {
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <EXTI15_10_IRQHandler+0xd4>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	0bdb      	lsrs	r3, r3, #15
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d009      	beq.n	8000ab4 <EXTI15_10_IRQHandler+0xd0>
			if (EXTI_CallBack[EXTI_15] != NULL)
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <EXTI15_10_IRQHandler+0xca>
			{
			EXTI_CallBack[EXTI_15]();
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <EXTI15_10_IRQHandler+0xd8>)
 8000aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aac:	4798      	blx	r3
			}
			EXTI_ClearPendingBit(EXTI_15);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff ff0e 	bl	80008d0 <EXTI_ClearPendingBit>
		}
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40010400 	.word	0x40010400
 8000abc:	20000020 	.word	0x20000020

08000ac0 <MGPIO_enSetPinDirection>:

  
  

ErrorState_t MGPIO_enSetPinDirection(GPIO_PIN_t Copy_enPIN,u8 Copy_u8Mode)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	460a      	mov	r2, r1
 8000aca:	80fb      	strh	r3, [r7, #6]
 8000acc:	4613      	mov	r3, r2
 8000ace:	717b      	strb	r3, [r7, #5]
	ErrorState_t Local_enStatus=SUCCES;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	73fb      	strb	r3, [r7, #15]
	u8 local_port = Copy_enPIN/100;
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	4a6c      	ldr	r2, [pc, #432]	; (8000c88 <MGPIO_enSetPinDirection+0x1c8>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	095b      	lsrs	r3, r3, #5
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	73bb      	strb	r3, [r7, #14]
	u8 local_pin =  Copy_enPIN%100 ;
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	4a68      	ldr	r2, [pc, #416]	; (8000c88 <MGPIO_enSetPinDirection+0x1c8>)
 8000ae6:	fba2 1203 	umull	r1, r2, r2, r3
 8000aea:	0952      	lsrs	r2, r2, #5
 8000aec:	2164      	movs	r1, #100	; 0x64
 8000aee:	fb01 f202 	mul.w	r2, r1, r2
 8000af2:	1a9b      	subs	r3, r3, r2
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	737b      	strb	r3, [r7, #13]


	switch (local_port)
 8000af8:	7bbb      	ldrb	r3, [r7, #14]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d07f      	beq.n	8000bfe <MGPIO_enSetPinDirection+0x13e>
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	f300 80b9 	bgt.w	8000c76 <MGPIO_enSetPinDirection+0x1b6>
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d002      	beq.n	8000b0e <MGPIO_enSetPinDirection+0x4e>
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d03c      	beq.n	8000b86 <MGPIO_enSetPinDirection+0xc6>
 8000b0c:	e0b3      	b.n	8000c76 <MGPIO_enSetPinDirection+0x1b6>
	{
	case  GPIO_PORTA:
		if(local_pin<=GPIO_u8f_REG_LEN)
 8000b0e:	7b7b      	ldrb	r3, [r7, #13]
 8000b10:	2b07      	cmp	r3, #7
 8000b12:	d817      	bhi.n	8000b44 <MGPIO_enSetPinDirection+0x84>
		{
			GPIO_A->GPIO_CRL&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000b14:	4b5d      	ldr	r3, [pc, #372]	; (8000c8c <MGPIO_enSetPinDirection+0x1cc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	7b7a      	ldrb	r2, [r7, #13]
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b22:	43d2      	mvns	r2, r2
 8000b24:	4611      	mov	r1, r2
 8000b26:	4a59      	ldr	r2, [pc, #356]	; (8000c8c <MGPIO_enSetPinDirection+0x1cc>)
 8000b28:	400b      	ands	r3, r1
 8000b2a:	6013      	str	r3, [r2, #0]
			GPIO_A->GPIO_CRL|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000b2c:	4b57      	ldr	r3, [pc, #348]	; (8000c8c <MGPIO_enSetPinDirection+0x1cc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	7979      	ldrb	r1, [r7, #5]
 8000b32:	7b7a      	ldrb	r2, [r7, #13]
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4a53      	ldr	r2, [pc, #332]	; (8000c8c <MGPIO_enSetPinDirection+0x1cc>)
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	6013      	str	r3, [r2, #0]
		}
		else
		{
			Local_enStatus=OUT_OF_RANGE;
		}
		break;
 8000b42:	e09b      	b.n	8000c7c <MGPIO_enSetPinDirection+0x1bc>
		else if(local_pin<=GPIO_u8L_REG_LEN)
 8000b44:	7b7b      	ldrb	r3, [r7, #13]
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	d81a      	bhi.n	8000b80 <MGPIO_enSetPinDirection+0xc0>
			local_pin=local_pin-GPIO_u8OFSET;
 8000b4a:	7b7b      	ldrb	r3, [r7, #13]
 8000b4c:	3b08      	subs	r3, #8
 8000b4e:	737b      	strb	r3, [r7, #13]
			GPIO_A->GPIO_CRH&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000b50:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <MGPIO_enSetPinDirection+0x1cc>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	7b7a      	ldrb	r2, [r7, #13]
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	210f      	movs	r1, #15
 8000b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5e:	43d2      	mvns	r2, r2
 8000b60:	4611      	mov	r1, r2
 8000b62:	4a4a      	ldr	r2, [pc, #296]	; (8000c8c <MGPIO_enSetPinDirection+0x1cc>)
 8000b64:	400b      	ands	r3, r1
 8000b66:	6053      	str	r3, [r2, #4]
			GPIO_A->GPIO_CRH|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000b68:	4b48      	ldr	r3, [pc, #288]	; (8000c8c <MGPIO_enSetPinDirection+0x1cc>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	7979      	ldrb	r1, [r7, #5]
 8000b6e:	7b7a      	ldrb	r2, [r7, #13]
 8000b70:	0092      	lsls	r2, r2, #2
 8000b72:	fa01 f202 	lsl.w	r2, r1, r2
 8000b76:	4611      	mov	r1, r2
 8000b78:	4a44      	ldr	r2, [pc, #272]	; (8000c8c <MGPIO_enSetPinDirection+0x1cc>)
 8000b7a:	430b      	orrs	r3, r1
 8000b7c:	6053      	str	r3, [r2, #4]
		break;
 8000b7e:	e07d      	b.n	8000c7c <MGPIO_enSetPinDirection+0x1bc>
			Local_enStatus=OUT_OF_RANGE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
		break;
 8000b84:	e07a      	b.n	8000c7c <MGPIO_enSetPinDirection+0x1bc>
		case  GPIO_PORTB:
			if(local_pin<=GPIO_u8f_REG_LEN)
 8000b86:	7b7b      	ldrb	r3, [r7, #13]
 8000b88:	2b07      	cmp	r3, #7
 8000b8a:	d817      	bhi.n	8000bbc <MGPIO_enSetPinDirection+0xfc>
					{
						GPIO_B->GPIO_CRL&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000b8c:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <MGPIO_enSetPinDirection+0x1d0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	7b7a      	ldrb	r2, [r7, #13]
 8000b92:	0092      	lsls	r2, r2, #2
 8000b94:	210f      	movs	r1, #15
 8000b96:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9a:	43d2      	mvns	r2, r2
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4a3c      	ldr	r2, [pc, #240]	; (8000c90 <MGPIO_enSetPinDirection+0x1d0>)
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	6013      	str	r3, [r2, #0]
						GPIO_B->GPIO_CRL|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000ba4:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <MGPIO_enSetPinDirection+0x1d0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	7979      	ldrb	r1, [r7, #5]
 8000baa:	7b7a      	ldrb	r2, [r7, #13]
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4a36      	ldr	r2, [pc, #216]	; (8000c90 <MGPIO_enSetPinDirection+0x1d0>)
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	6013      	str	r3, [r2, #0]
					}
					else
					{
						Local_enStatus=OUT_OF_RANGE;
					}
		break;
 8000bba:	e05f      	b.n	8000c7c <MGPIO_enSetPinDirection+0x1bc>
					else if(local_pin<=GPIO_u8L_REG_LEN)
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d81a      	bhi.n	8000bf8 <MGPIO_enSetPinDirection+0x138>
						local_pin=local_pin-GPIO_u8OFSET;
 8000bc2:	7b7b      	ldrb	r3, [r7, #13]
 8000bc4:	3b08      	subs	r3, #8
 8000bc6:	737b      	strb	r3, [r7, #13]
						GPIO_B->GPIO_CRH&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000bc8:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <MGPIO_enSetPinDirection+0x1d0>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	7b7a      	ldrb	r2, [r7, #13]
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	43d2      	mvns	r2, r2
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4a2d      	ldr	r2, [pc, #180]	; (8000c90 <MGPIO_enSetPinDirection+0x1d0>)
 8000bdc:	400b      	ands	r3, r1
 8000bde:	6053      	str	r3, [r2, #4]
						GPIO_B->GPIO_CRH|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000be0:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <MGPIO_enSetPinDirection+0x1d0>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	7979      	ldrb	r1, [r7, #5]
 8000be6:	7b7a      	ldrb	r2, [r7, #13]
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	fa01 f202 	lsl.w	r2, r1, r2
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <MGPIO_enSetPinDirection+0x1d0>)
 8000bf2:	430b      	orrs	r3, r1
 8000bf4:	6053      	str	r3, [r2, #4]
		break;
 8000bf6:	e041      	b.n	8000c7c <MGPIO_enSetPinDirection+0x1bc>
						Local_enStatus=OUT_OF_RANGE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
		break;
 8000bfc:	e03e      	b.n	8000c7c <MGPIO_enSetPinDirection+0x1bc>
		case  GPIO_PORTC:
			if(local_pin<=GPIO_u8f_REG_LEN)
 8000bfe:	7b7b      	ldrb	r3, [r7, #13]
 8000c00:	2b07      	cmp	r3, #7
 8000c02:	d817      	bhi.n	8000c34 <MGPIO_enSetPinDirection+0x174>
					{
						GPIO_C->GPIO_CRL&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <MGPIO_enSetPinDirection+0x1d4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	7b7a      	ldrb	r2, [r7, #13]
 8000c0a:	0092      	lsls	r2, r2, #2
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c12:	43d2      	mvns	r2, r2
 8000c14:	4611      	mov	r1, r2
 8000c16:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <MGPIO_enSetPinDirection+0x1d4>)
 8000c18:	400b      	ands	r3, r1
 8000c1a:	6013      	str	r3, [r2, #0]
						GPIO_C->GPIO_CRL|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MGPIO_enSetPinDirection+0x1d4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	7979      	ldrb	r1, [r7, #5]
 8000c22:	7b7a      	ldrb	r2, [r7, #13]
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <MGPIO_enSetPinDirection+0x1d4>)
 8000c2e:	430b      	orrs	r3, r1
 8000c30:	6013      	str	r3, [r2, #0]
					}
					else
					{
						Local_enStatus=OUT_OF_RANGE;
					}
		break;
 8000c32:	e023      	b.n	8000c7c <MGPIO_enSetPinDirection+0x1bc>
					else if(local_pin<=GPIO_u8L_REG_LEN)
 8000c34:	7b7b      	ldrb	r3, [r7, #13]
 8000c36:	2b0f      	cmp	r3, #15
 8000c38:	d81a      	bhi.n	8000c70 <MGPIO_enSetPinDirection+0x1b0>
						local_pin=local_pin-GPIO_u8OFSET;
 8000c3a:	7b7b      	ldrb	r3, [r7, #13]
 8000c3c:	3b08      	subs	r3, #8
 8000c3e:	737b      	strb	r3, [r7, #13]
						GPIO_C->GPIO_CRH&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MGPIO_enSetPinDirection+0x1d4>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	7b7a      	ldrb	r2, [r7, #13]
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	210f      	movs	r1, #15
 8000c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4e:	43d2      	mvns	r2, r2
 8000c50:	4611      	mov	r1, r2
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <MGPIO_enSetPinDirection+0x1d4>)
 8000c54:	400b      	ands	r3, r1
 8000c56:	6053      	str	r3, [r2, #4]
						GPIO_C->GPIO_CRH|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MGPIO_enSetPinDirection+0x1d4>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	7979      	ldrb	r1, [r7, #5]
 8000c5e:	7b7a      	ldrb	r2, [r7, #13]
 8000c60:	0092      	lsls	r2, r2, #2
 8000c62:	fa01 f202 	lsl.w	r2, r1, r2
 8000c66:	4611      	mov	r1, r2
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <MGPIO_enSetPinDirection+0x1d4>)
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	6053      	str	r3, [r2, #4]
		break;
 8000c6e:	e005      	b.n	8000c7c <MGPIO_enSetPinDirection+0x1bc>
						Local_enStatus=OUT_OF_RANGE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
		break;
 8000c74:	e002      	b.n	8000c7c <MGPIO_enSetPinDirection+0x1bc>
	
	default:
	Local_enStatus=OUT_OF_RANGE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
		break;
 8000c7a:	bf00      	nop
	}

 return Local_enStatus;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	51eb851f 	.word	0x51eb851f
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40011000 	.word	0x40011000

08000c98 <MGPIO_enSetPinValue>:
ErrorState_t MGPIO_enSetPinValue(GPIO_PIN_t Copy_enPIN,u8 Copy_u8Value)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	80fb      	strh	r3, [r7, #6]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	717b      	strb	r3, [r7, #5]
	ErrorState_t Local_enStatus=SUCCES;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	73fb      	strb	r3, [r7, #15]
	u8 local_port = Copy_enPIN/100;
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	4a42      	ldr	r2, [pc, #264]	; (8000db8 <MGPIO_enSetPinValue+0x120>)
 8000cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb4:	095b      	lsrs	r3, r3, #5
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	73bb      	strb	r3, [r7, #14]
	u8 local_pin =  Copy_enPIN%100 ;
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	4a3e      	ldr	r2, [pc, #248]	; (8000db8 <MGPIO_enSetPinValue+0x120>)
 8000cbe:	fba2 1203 	umull	r1, r2, r2, r3
 8000cc2:	0952      	lsrs	r2, r2, #5
 8000cc4:	2164      	movs	r1, #100	; 0x64
 8000cc6:	fb01 f202 	mul.w	r2, r1, r2
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	737b      	strb	r3, [r7, #13]

	switch(local_port)
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d046      	beq.n	8000d64 <MGPIO_enSetPinValue+0xcc>
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	dc64      	bgt.n	8000da4 <MGPIO_enSetPinValue+0x10c>
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d002      	beq.n	8000ce4 <MGPIO_enSetPinValue+0x4c>
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d020      	beq.n	8000d24 <MGPIO_enSetPinValue+0x8c>
 8000ce2:	e05f      	b.n	8000da4 <MGPIO_enSetPinValue+0x10c>
	{
		case GPIO_PORTA: 
			if (Copy_u8Value==GPIO_u8HIGH)
 8000ce4:	797b      	ldrb	r3, [r7, #5]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d10a      	bne.n	8000d00 <MGPIO_enSetPinValue+0x68>
			{
				SET_BIT(GPIO_A->GPIO_ODR,local_pin);
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <MGPIO_enSetPinValue+0x124>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	7b7a      	ldrb	r2, [r7, #13]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4a30      	ldr	r2, [pc, #192]	; (8000dbc <MGPIO_enSetPinValue+0x124>)
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	60d3      	str	r3, [r2, #12]
			else
			{
			Local_enStatus=OUT_OF_RANGE;
			}
			
		break;
 8000cfe:	e054      	b.n	8000daa <MGPIO_enSetPinValue+0x112>
			else if(Copy_u8Value==GPIO_u8LOW)
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10b      	bne.n	8000d1e <MGPIO_enSetPinValue+0x86>
				CLR_BIT(GPIO_A->GPIO_ODR,local_pin);
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MGPIO_enSetPinValue+0x124>)
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	7b7a      	ldrb	r2, [r7, #13]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	43d2      	mvns	r2, r2
 8000d14:	4611      	mov	r1, r2
 8000d16:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <MGPIO_enSetPinValue+0x124>)
 8000d18:	400b      	ands	r3, r1
 8000d1a:	60d3      	str	r3, [r2, #12]
		break;
 8000d1c:	e045      	b.n	8000daa <MGPIO_enSetPinValue+0x112>
			Local_enStatus=OUT_OF_RANGE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]
		break;
 8000d22:	e042      	b.n	8000daa <MGPIO_enSetPinValue+0x112>

		case GPIO_PORTB: 
				if (Copy_u8Value==GPIO_u8HIGH)
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d10a      	bne.n	8000d40 <MGPIO_enSetPinValue+0xa8>
			{
				SET_BIT(GPIO_B->GPIO_ODR,local_pin);
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <MGPIO_enSetPinValue+0x128>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	7b7a      	ldrb	r2, [r7, #13]
 8000d30:	2101      	movs	r1, #1
 8000d32:	fa01 f202 	lsl.w	r2, r1, r2
 8000d36:	4611      	mov	r1, r2
 8000d38:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <MGPIO_enSetPinValue+0x128>)
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	60d3      	str	r3, [r2, #12]
			else
			{
			Local_enStatus=OUT_OF_RANGE;
			}
			
		break;
 8000d3e:	e034      	b.n	8000daa <MGPIO_enSetPinValue+0x112>
			else if(Copy_u8Value==GPIO_u8LOW)
 8000d40:	797b      	ldrb	r3, [r7, #5]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10b      	bne.n	8000d5e <MGPIO_enSetPinValue+0xc6>
				CLR_BIT(GPIO_B->GPIO_ODR,local_pin);
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MGPIO_enSetPinValue+0x128>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	7b7a      	ldrb	r2, [r7, #13]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	43d2      	mvns	r2, r2
 8000d54:	4611      	mov	r1, r2
 8000d56:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <MGPIO_enSetPinValue+0x128>)
 8000d58:	400b      	ands	r3, r1
 8000d5a:	60d3      	str	r3, [r2, #12]
		break;
 8000d5c:	e025      	b.n	8000daa <MGPIO_enSetPinValue+0x112>
			Local_enStatus=OUT_OF_RANGE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
		break;
 8000d62:	e022      	b.n	8000daa <MGPIO_enSetPinValue+0x112>
		case GPIO_PORTC: 
		if (Copy_u8Value==GPIO_u8HIGH)
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d10a      	bne.n	8000d80 <MGPIO_enSetPinValue+0xe8>
			{
				SET_BIT(GPIO_C->GPIO_ODR,local_pin);
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MGPIO_enSetPinValue+0x12c>)
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	7b7a      	ldrb	r2, [r7, #13]
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	4611      	mov	r1, r2
 8000d78:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <MGPIO_enSetPinValue+0x12c>)
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	60d3      	str	r3, [r2, #12]
			Local_enStatus=OUT_OF_RANGE;
			}
			
		
		
		break;
 8000d7e:	e014      	b.n	8000daa <MGPIO_enSetPinValue+0x112>
			else if(Copy_u8Value==GPIO_u8LOW)
 8000d80:	797b      	ldrb	r3, [r7, #5]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10b      	bne.n	8000d9e <MGPIO_enSetPinValue+0x106>
				CLR_BIT(GPIO_C->GPIO_ODR,local_pin);
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MGPIO_enSetPinValue+0x12c>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	7b7a      	ldrb	r2, [r7, #13]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d92:	43d2      	mvns	r2, r2
 8000d94:	4611      	mov	r1, r2
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <MGPIO_enSetPinValue+0x12c>)
 8000d98:	400b      	ands	r3, r1
 8000d9a:	60d3      	str	r3, [r2, #12]
		break;
 8000d9c:	e005      	b.n	8000daa <MGPIO_enSetPinValue+0x112>
			Local_enStatus=OUT_OF_RANGE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
		break;
 8000da2:	e002      	b.n	8000daa <MGPIO_enSetPinValue+0x112>
		default:
			Local_enStatus=OUT_OF_RANGE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
		break;
 8000da8:	bf00      	nop

	}
	return Local_enStatus;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	51eb851f 	.word	0x51eb851f
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	40010c00 	.word	0x40010c00
 8000dc4:	40011000 	.word	0x40011000

08000dc8 <MGPIO_enTogglePin>:
}
    return Local_enStatus;
}

ErrorState_t MGPIO_enTogglePin(GPIO_PIN_t Copy_enPIN)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
	ErrorState_t Local_enStatus=SUCCES;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	73fb      	strb	r3, [r7, #15]
	u8 local_port = Copy_enPIN/100;
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MGPIO_enTogglePin+0x9c>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	73bb      	strb	r3, [r7, #14]
	u8 local_pin =  Copy_enPIN%100 ;
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <MGPIO_enTogglePin+0x9c>)
 8000de8:	fba2 1203 	umull	r1, r2, r2, r3
 8000dec:	0952      	lsrs	r2, r2, #5
 8000dee:	2164      	movs	r1, #100	; 0x64
 8000df0:	fb01 f202 	mul.w	r2, r1, r2
 8000df4:	1a9b      	subs	r3, r3, r2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	737b      	strb	r3, [r7, #13]
	switch (local_port)
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d01c      	beq.n	8000e3a <MGPIO_enTogglePin+0x72>
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	dc25      	bgt.n	8000e50 <MGPIO_enTogglePin+0x88>
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d002      	beq.n	8000e0e <MGPIO_enTogglePin+0x46>
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d00b      	beq.n	8000e24 <MGPIO_enTogglePin+0x5c>
 8000e0c:	e020      	b.n	8000e50 <MGPIO_enTogglePin+0x88>
	{
		case GPIO_PORTA:
			TOG_BIT(GPIO_A->GPIO_ODR,local_pin);
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MGPIO_enTogglePin+0xa0>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	7b7a      	ldrb	r2, [r7, #13]
 8000e14:	2101      	movs	r1, #1
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <MGPIO_enTogglePin+0xa0>)
 8000e1e:	404b      	eors	r3, r1
 8000e20:	60d3      	str	r3, [r2, #12]
		break;
 8000e22:	e018      	b.n	8000e56 <MGPIO_enTogglePin+0x8e>
		case  GPIO_PORTB:
			TOG_BIT(GPIO_B->GPIO_ODR,local_pin);
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MGPIO_enTogglePin+0xa4>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	7b7a      	ldrb	r2, [r7, #13]
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4611      	mov	r1, r2
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <MGPIO_enTogglePin+0xa4>)
 8000e34:	404b      	eors	r3, r1
 8000e36:	60d3      	str	r3, [r2, #12]
		break;
 8000e38:	e00d      	b.n	8000e56 <MGPIO_enTogglePin+0x8e>
		case GPIO_PORTC:
			TOG_BIT(GPIO_C->GPIO_ODR,local_pin);
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MGPIO_enTogglePin+0xa8>)
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	7b7a      	ldrb	r2, [r7, #13]
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	4611      	mov	r1, r2
 8000e48:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <MGPIO_enTogglePin+0xa8>)
 8000e4a:	404b      	eors	r3, r1
 8000e4c:	60d3      	str	r3, [r2, #12]
		break;
 8000e4e:	e002      	b.n	8000e56 <MGPIO_enTogglePin+0x8e>

	default:
			Local_enStatus=OUT_OF_RANGE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]
		break;
 8000e54:	bf00      	nop
	}
	    return Local_enStatus;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	51eb851f 	.word	0x51eb851f
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	40010c00 	.word	0x40010c00
 8000e70:	40011000 	.word	0x40011000

08000e74 <MNVIC_u8EnableInterrupt>:
return SUCCES;
}


ErrorState_t MNVIC_u8EnableInterrupt(NVIC_Prority_t Copy_u8IRQNumber)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	ErrorState_t Local_enState=SUCCES;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8IRQNumber<31)
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b1e      	cmp	r3, #30
 8000e86:	d805      	bhi.n	8000e94 <MNVIC_u8EnableInterrupt+0x20>
	{	//Atomic Acssess change only the bit
		NVIC_REG->NVIC_ISER[0]=(1<<Copy_u8IRQNumber);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MNVIC_u8EnableInterrupt+0x60>)
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e019      	b.n	8000ec8 <MNVIC_u8EnableInterrupt+0x54>
	}
	else if(Copy_u8IRQNumber<63)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b3e      	cmp	r3, #62	; 0x3e
 8000e98:	d808      	bhi.n	8000eac <MNVIC_u8EnableInterrupt+0x38>
	{	//Atomic Acssess change only the bit
		Copy_u8IRQNumber=Copy_u8IRQNumber-32;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	3b20      	subs	r3, #32
 8000e9e:	71fb      	strb	r3, [r7, #7]
		NVIC_REG->NVIC_ISER[1]=(1<<Copy_u8IRQNumber);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MNVIC_u8EnableInterrupt+0x60>)
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	e00d      	b.n	8000ec8 <MNVIC_u8EnableInterrupt+0x54>
	}
	else if(Copy_u8IRQNumber<81)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b50      	cmp	r3, #80	; 0x50
 8000eb0:	d808      	bhi.n	8000ec4 <MNVIC_u8EnableInterrupt+0x50>
	{	//Atomic Acssess change only the bit
		Copy_u8IRQNumber=Copy_u8IRQNumber-64;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	3b40      	subs	r3, #64	; 0x40
 8000eb6:	71fb      	strb	r3, [r7, #7]
		NVIC_REG->NVIC_ISER[2]=(1<<Copy_u8IRQNumber);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	409a      	lsls	r2, r3
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <MNVIC_u8EnableInterrupt+0x60>)
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	e001      	b.n	8000ec8 <MNVIC_u8EnableInterrupt+0x54>
	}
	else
	{
		Local_enState=OUT_OF_RANGE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

	}
	return Local_enState;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <RCC_voidInitSystemClock>:
#include "MRCC_priv.h"
#include "MRCC_config.h"
#include "MRCC_int.h"

void RCC_voidInitSystemClock(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
#if RCC_u8CLK_TYPE==RCC_u8HSE_CRYSTAL
	RCC->RCC_CR=0x00010080;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <RCC_voidInitSystemClock+0x14>)
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <RCC_voidInitSystemClock+0x18>)
 8000ee0:	601a      	str	r2, [r3, #0]
	//RCC->RCC_CR = 0x00010080;
#else
	#error("You choosed wrong Clock Type")
#endif

}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	00010080 	.word	0x00010080

08000ef4 <RCC_voidEnablePeriphralCLK>:

ErrorState_t RCC_voidEnablePeriphralCLK(PeriphralBusId_t Copy_enPeriphralId)
{	
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8BusID =Copy_enPeriphralId/100;
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <RCC_voidEnablePeriphralCLK+0xa4>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	73bb      	strb	r3, [r7, #14]
	u8 Local_u8PeriphralID =Copy_enPeriphralId % 100;
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <RCC_voidEnablePeriphralCLK+0xa4>)
 8000f10:	fba2 1203 	umull	r1, r2, r2, r3
 8000f14:	0952      	lsrs	r2, r2, #5
 8000f16:	2164      	movs	r1, #100	; 0x64
 8000f18:	fb01 f202 	mul.w	r2, r1, r2
 8000f1c:	1a9b      	subs	r3, r3, r2
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	737b      	strb	r3, [r7, #13]

	ErrorState_t Local_enErrorState=SUCCES;
 8000f22:	2302      	movs	r3, #2
 8000f24:	73fb      	strb	r3, [r7, #15]

	if(Local_u8PeriphralID  <= 31) //unsigned
 8000f26:	7b7b      	ldrb	r3, [r7, #13]
 8000f28:	2b1f      	cmp	r3, #31
 8000f2a:	d82d      	bhi.n	8000f88 <RCC_voidEnablePeriphralCLK+0x94>
	{
		switch(Local_u8BusID)
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d01c      	beq.n	8000f6c <RCC_voidEnablePeriphralCLK+0x78>
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	dc25      	bgt.n	8000f82 <RCC_voidEnablePeriphralCLK+0x8e>
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d002      	beq.n	8000f40 <RCC_voidEnablePeriphralCLK+0x4c>
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d00b      	beq.n	8000f56 <RCC_voidEnablePeriphralCLK+0x62>
 8000f3e:	e020      	b.n	8000f82 <RCC_voidEnablePeriphralCLK+0x8e>
		{
			case RCC_u8AHB: SET_BIT(RCC->RCC_AHBENR,Local_u8PeriphralID) ;    	
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <RCC_voidEnablePeriphralCLK+0xa8>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	7b7a      	ldrb	r2, [r7, #13]
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <RCC_voidEnablePeriphralCLK+0xa8>)
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6153      	str	r3, [r2, #20]
			break;
 8000f54:	e01a      	b.n	8000f8c <RCC_voidEnablePeriphralCLK+0x98>

			case RCC_u8APB2:SET_BIT(RCC->RCC_APB2ENR,Local_u8PeriphralID) ;	
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <RCC_voidEnablePeriphralCLK+0xa8>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	7b7a      	ldrb	r2, [r7, #13]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f62:	4611      	mov	r1, r2
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <RCC_voidEnablePeriphralCLK+0xa8>)
 8000f66:	430b      	orrs	r3, r1
 8000f68:	6193      	str	r3, [r2, #24]
			break;
 8000f6a:	e00f      	b.n	8000f8c <RCC_voidEnablePeriphralCLK+0x98>

			case RCC_u8APB1: SET_BIT(RCC->RCC_APB1ENR,Local_u8PeriphralID) ;	
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <RCC_voidEnablePeriphralCLK+0xa8>)
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	7b7a      	ldrb	r2, [r7, #13]
 8000f72:	2101      	movs	r1, #1
 8000f74:	fa01 f202 	lsl.w	r2, r1, r2
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <RCC_voidEnablePeriphralCLK+0xa8>)
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	61d3      	str	r3, [r2, #28]
			break;
 8000f80:	e004      	b.n	8000f8c <RCC_voidEnablePeriphralCLK+0x98>
			
			
			
			default:
			Local_enErrorState=OUT_OF_RANGE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
			break;
 8000f86:	e001      	b.n	8000f8c <RCC_voidEnablePeriphralCLK+0x98>
		}

	}
	else
	{
		Local_enErrorState=OUT_OF_RANGE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

	}

	return Local_enErrorState;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	51eb851f 	.word	0x51eb851f
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <MSTK_enInit>:
static void (*CallBackFun)(void)=NULL;

static u8 SG_u8Interval_Mode;

ErrorState_t MSTK_enInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
	ErrorState_t Local_Status=SUCCES;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	71fb      	strb	r3, [r7, #7]
#if CLOCK_MODE==AHB_OVER_8_MODE

	//SET_BIT(STK_REG->STK_CTRL,ENABLE_BIT);
	CLR_BIT(STK_REG->STK_CTRL,CLKSOURCE_BIT);
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MSTK_enInit+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <MSTK_enInit+0x24>)
 8000fb0:	f023 0304 	bic.w	r3, r3, #4
 8000fb4:	6013      	str	r3, [r2, #0]
	SET_BIT(STK_REG->STK_CTRL,CLKSOURCE_BIT);

#else
 #error("Wrong AHB MODE")
#endif
return SUCCES;
 8000fb6:	2302      	movs	r3, #2
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <MSTK_enSetBusyWait>:
ErrorState_t MSTK_enSetBusyWait(u32 copy_u8Ticks)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_Status=SUCCES;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	73fb      	strb	r3, [r7, #15]

	u32 Local_Ticksin_ms=copy_u8Ticks*1000;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	60bb      	str	r3, [r7, #8]
	//enable Timer
	if(Local_Ticksin_ms<=MAX_LOAD_VALUE){
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe6:	d21b      	bcs.n	8001020 <MSTK_enSetBusyWait+0x58>
	SET_BIT(STK_REG->STK_CTRL,ENABLE_BIT);//Enable bit
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MSTK_enSetBusyWait+0x68>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a10      	ldr	r2, [pc, #64]	; (8001030 <MSTK_enSetBusyWait+0x68>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6013      	str	r3, [r2, #0]
	STK_REG->STK_LOAD=Local_Ticksin_ms;//set value to delay
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <MSTK_enSetBusyWait+0x68>)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	6053      	str	r3, [r2, #4]
	while(!GET_BIT(STK_REG->STK_CTRL,COUNTFLAG));
 8000ffa:	bf00      	nop
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MSTK_enSetBusyWait+0x68>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	08db      	lsrs	r3, r3, #3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0fa      	beq.n	8000ffc <MSTK_enSetBusyWait+0x34>
	//disable Timer
	CLR_BIT(STK_REG->STK_CTRL,ENABLE_BIT);
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MSTK_enSetBusyWait+0x68>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <MSTK_enSetBusyWait+0x68>)
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	6013      	str	r3, [r2, #0]
	STK_REG->STK_LOAD=0;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MSTK_enSetBusyWait+0x68>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
	STK_REG->STK_VAL=0;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <MSTK_enSetBusyWait+0x68>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	e001      	b.n	8001024 <MSTK_enSetBusyWait+0x5c>
	}
	else
	{
		 Local_Status=FAILIUR;
 8001020:	2303      	movs	r3, #3
 8001022:	73fb      	strb	r3, [r7, #15]
	}


return Local_Status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	e000e010 	.word	0xe000e010

08001034 <SysTick_Handler>:
	}
return Local_Status;
}

void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

	CallBackFun();
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <SysTick_Handler+0x3c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4798      	blx	r3

	if(SG_u8Interval_Mode==STK_MODE_SINGLE)
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <SysTick_Handler+0x40>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d111      	bne.n	800106a <SysTick_Handler+0x36>
	{
		CLR_BIT(STK_REG->STK_CTRL,ENABLE_BIT);
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <SysTick_Handler+0x44>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <SysTick_Handler+0x44>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK_REG->STK_CTRL,TICKINT_BIT);
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <SysTick_Handler+0x44>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <SysTick_Handler+0x44>)
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	6013      	str	r3, [r2, #0]
		STK_REG->STK_LOAD=0;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SysTick_Handler+0x44>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
		STK_REG->STK_VAL=0;
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Handler+0x44>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]


	}


}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000060 	.word	0x20000060
 8001074:	20000064 	.word	0x20000064
 8001078:	e000e010 	.word	0xe000e010

0800107c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001080:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010aa:	f000 f811 	bl	80010d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ae:	f7ff f85f 	bl	8000170 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   r0, =_estack
 80010b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80010c0:	08001180 	.word	0x08001180
  ldr r2, =_sbss
 80010c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80010c8:	20000068 	.word	0x20000068

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>
	...

080010d0 <__libc_init_array>:
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	2600      	movs	r6, #0
 80010d4:	4d0c      	ldr	r5, [pc, #48]	; (8001108 <__libc_init_array+0x38>)
 80010d6:	4c0d      	ldr	r4, [pc, #52]	; (800110c <__libc_init_array+0x3c>)
 80010d8:	1b64      	subs	r4, r4, r5
 80010da:	10a4      	asrs	r4, r4, #2
 80010dc:	42a6      	cmp	r6, r4
 80010de:	d109      	bne.n	80010f4 <__libc_init_array+0x24>
 80010e0:	f000 f81a 	bl	8001118 <_init>
 80010e4:	2600      	movs	r6, #0
 80010e6:	4d0a      	ldr	r5, [pc, #40]	; (8001110 <__libc_init_array+0x40>)
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <__libc_init_array+0x44>)
 80010ea:	1b64      	subs	r4, r4, r5
 80010ec:	10a4      	asrs	r4, r4, #2
 80010ee:	42a6      	cmp	r6, r4
 80010f0:	d105      	bne.n	80010fe <__libc_init_array+0x2e>
 80010f2:	bd70      	pop	{r4, r5, r6, pc}
 80010f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80010f8:	4798      	blx	r3
 80010fa:	3601      	adds	r6, #1
 80010fc:	e7ee      	b.n	80010dc <__libc_init_array+0xc>
 80010fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001102:	4798      	blx	r3
 8001104:	3601      	adds	r6, #1
 8001106:	e7f2      	b.n	80010ee <__libc_init_array+0x1e>
 8001108:	08001178 	.word	0x08001178
 800110c:	08001178 	.word	0x08001178
 8001110:	08001178 	.word	0x08001178
 8001114:	0800117c 	.word	0x0800117c

08001118 <_init>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	bf00      	nop
 800111c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800111e:	bc08      	pop	{r3}
 8001120:	469e      	mov	lr, r3
 8001122:	4770      	bx	lr

08001124 <_fini>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	bf00      	nop
 8001128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800112a:	bc08      	pop	{r3}
 800112c:	469e      	mov	lr, r3
 800112e:	4770      	bx	lr
