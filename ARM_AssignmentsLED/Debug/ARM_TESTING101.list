
ARM_TESTING101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000714  08000714  00010714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000724  08000724  0001072c  2**0
                  CONTENTS
  4 .ARM          00000000  08000724  08000724  0001072c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000724  0800072c  0001072c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000724  08000724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000728  08000728  00010728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001072c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  0800072c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800072c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001072c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000112f  00000000  00000000  00010755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004fd  00000000  00000000  00011884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00011d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  00011f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f6d  00000000  00000000  00012030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000110a  00000000  00000000  00012f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000042c9  00000000  00000000  000140a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00018370  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000494  00000000  00000000  000183c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080006fc 	.word	0x080006fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080006fc 	.word	0x080006fc

08000170 <main>:
#include "HSWITCH_int.h"
#include "HLEDMRX_int.h"
void delay(u16 num);

void main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
u8 arr[8]={55, 24, 36, 66, 126, 66, 66, 0};
 8000176:	4a1c      	ldr	r2, [pc, #112]	; (80001e8 <main+0x78>)
 8000178:	f107 030c 	add.w	r3, r7, #12
 800017c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000180:	e883 0003 	stmia.w	r3, {r0, r1}
u8 arr2[8]={0, 126, 65, 34, 148, 136, 84, 102};
 8000184:	4a19      	ldr	r2, [pc, #100]	; (80001ec <main+0x7c>)
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800018c:	e883 0003 	stmia.w	r3, {r0, r1}
	RCC_voidInitSystemClock();
 8000190:	f000 f994 	bl	80004bc <RCC_voidInitSystemClock>
	RCC_voidEnablePeriphralCLK(APB2_IOPAEN);
 8000194:	20ca      	movs	r0, #202	; 0xca
 8000196:	f000 f99f 	bl	80004d8 <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPBEN);
 800019a:	20cb      	movs	r0, #203	; 0xcb
 800019c:	f000 f99c 	bl	80004d8 <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPCEN);
 80001a0:	20cc      	movs	r0, #204	; 0xcc
 80001a2:	f000 f999 	bl	80004d8 <RCC_voidEnablePeriphralCLK>
	MSTK_enInit();
 80001a6:	f000 f9ed 	bl	8000584 <MSTK_enInit>

	HLEDMRX_voidInit();
 80001aa:	f000 f821 	bl	80001f0 <HLEDMRX_voidInit>

	//u8 value=1;

  while(1){
	 u8 value=1;
 80001ae:	2301      	movs	r3, #1
 80001b0:	75fb      	strb	r3, [r7, #23]
	 u8 i=0;
 80001b2:	2300      	movs	r3, #0
 80001b4:	75bb      	strb	r3, [r7, #22]
	while(i<8){
 80001b6:	e012      	b.n	80001de <main+0x6e>
	MGPIO_u8SetPortValue_L(GPIO_PORTB, value);
 80001b8:	7dfb      	ldrb	r3, [r7, #23]
 80001ba:	4619      	mov	r1, r3
 80001bc:	2002      	movs	r0, #2
 80001be:	f000 f85b 	bl	8000278 <MGPIO_u8SetPortValue_L>
	MSTK_enSetBusyWait(500);
 80001c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001c6:	f000 f9f1 	bl	80005ac <MSTK_enSetBusyWait>
	value<<=1;
 80001ca:	7dfb      	ldrb	r3, [r7, #23]
 80001cc:	005b      	lsls	r3, r3, #1
 80001ce:	75fb      	strb	r3, [r7, #23]
	MSTK_enSetBusyWait(500);
 80001d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001d4:	f000 f9ea 	bl	80005ac <MSTK_enSetBusyWait>
	i++;
 80001d8:	7dbb      	ldrb	r3, [r7, #22]
 80001da:	3301      	adds	r3, #1
 80001dc:	75bb      	strb	r3, [r7, #22]
	while(i<8){
 80001de:	7dbb      	ldrb	r3, [r7, #22]
 80001e0:	2b07      	cmp	r3, #7
 80001e2:	d9e9      	bls.n	80001b8 <main+0x48>
  while(1){
 80001e4:	e7e3      	b.n	80001ae <main+0x3e>
 80001e6:	bf00      	nop
 80001e8:	08000714 	.word	0x08000714
 80001ec:	0800071c 	.word	0x0800071c

080001f0 <HLEDMRX_voidInit>:
#include "HLEDMRX_priv.h"
#include "HLEDMRX_config.h"
#include "HLED_int.h"

void HLEDMRX_voidInit(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0

//rows
MGPIO_enSetPinDirection(LEDMRX_u8ROW0,GPIO_u8OUT_PUSH_PULL_2MHZ);
 80001f4:	2102      	movs	r1, #2
 80001f6:	2064      	movs	r0, #100	; 0x64
 80001f8:	f000 f874 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW1,GPIO_u8OUT_PUSH_PULL_2MHZ);
 80001fc:	2102      	movs	r1, #2
 80001fe:	2065      	movs	r0, #101	; 0x65
 8000200:	f000 f870 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW0,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000204:	2102      	movs	r1, #2
 8000206:	2064      	movs	r0, #100	; 0x64
 8000208:	f000 f86c 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW3,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800020c:	2102      	movs	r1, #2
 800020e:	2067      	movs	r0, #103	; 0x67
 8000210:	f000 f868 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW4,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000214:	2102      	movs	r1, #2
 8000216:	2068      	movs	r0, #104	; 0x68
 8000218:	f000 f864 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW5,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800021c:	2102      	movs	r1, #2
 800021e:	2069      	movs	r0, #105	; 0x69
 8000220:	f000 f860 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW6,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000224:	2102      	movs	r1, #2
 8000226:	206a      	movs	r0, #106	; 0x6a
 8000228:	f000 f85c 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8ROW7,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800022c:	2102      	movs	r1, #2
 800022e:	206b      	movs	r0, #107	; 0x6b
 8000230:	f000 f858 	bl	80002e4 <MGPIO_enSetPinDirection>
//col
MGPIO_enSetPinDirection(LEDMRX_u8COL0,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000234:	2102      	movs	r1, #2
 8000236:	20c8      	movs	r0, #200	; 0xc8
 8000238:	f000 f854 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL1,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800023c:	2102      	movs	r1, #2
 800023e:	20c9      	movs	r0, #201	; 0xc9
 8000240:	f000 f850 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL0,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000244:	2102      	movs	r1, #2
 8000246:	20c8      	movs	r0, #200	; 0xc8
 8000248:	f000 f84c 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL3,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800024c:	2102      	movs	r1, #2
 800024e:	20ce      	movs	r0, #206	; 0xce
 8000250:	f000 f848 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL4,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000254:	2102      	movs	r1, #2
 8000256:	20cf      	movs	r0, #207	; 0xcf
 8000258:	f000 f844 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL5,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800025c:	2102      	movs	r1, #2
 800025e:	20d0      	movs	r0, #208	; 0xd0
 8000260:	f000 f840 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL6,GPIO_u8OUT_PUSH_PULL_2MHZ);
 8000264:	2102      	movs	r1, #2
 8000266:	20d1      	movs	r0, #209	; 0xd1
 8000268:	f000 f83c 	bl	80002e4 <MGPIO_enSetPinDirection>
MGPIO_enSetPinDirection(LEDMRX_u8COL7,GPIO_u8OUT_PUSH_PULL_2MHZ);
 800026c:	2102      	movs	r1, #2
 800026e:	20d2      	movs	r0, #210	; 0xd2
 8000270:	f000 f838 	bl	80002e4 <MGPIO_enSetPinDirection>
//disable all colomns
//LEDMRX_voidDisableALLColumns();
//disable all rows
//LEDMRX_voidDisableALLRow();

}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}

08000278 <MGPIO_u8SetPortValue_L>:
			State = FAILIUR ;
			break ; 
	}
	return State ;
}
ErrorState_t MGPIO_u8SetPortValue_L(u8 Copy_u8PortId ,u8 Copy_u8Value) {
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	460a      	mov	r2, r1
 8000282:	71fb      	strb	r3, [r7, #7]
 8000284:	4613      	mov	r3, r2
 8000286:	71bb      	strb	r3, [r7, #6]
	ErrorState_t State = SUCCES ;
 8000288:	2302      	movs	r3, #2
 800028a:	73fb      	strb	r3, [r7, #15]
	switch (Copy_u8PortId)
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	2b03      	cmp	r3, #3
 8000290:	d012      	beq.n	80002b8 <MGPIO_u8SetPortValue_L+0x40>
 8000292:	2b03      	cmp	r3, #3
 8000294:	dc16      	bgt.n	80002c4 <MGPIO_u8SetPortValue_L+0x4c>
 8000296:	2b01      	cmp	r3, #1
 8000298:	d002      	beq.n	80002a0 <MGPIO_u8SetPortValue_L+0x28>
 800029a:	2b02      	cmp	r3, #2
 800029c:	d006      	beq.n	80002ac <MGPIO_u8SetPortValue_L+0x34>
 800029e:	e011      	b.n	80002c4 <MGPIO_u8SetPortValue_L+0x4c>
	{
		case GPIO_PORTA :
			GPIO_A->GPIO_ODR = Copy_u8Value ;
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <MGPIO_u8SetPortValue_L+0x60>)
 80002a2:	79bb      	ldrb	r3, [r7, #6]
 80002a4:	60d3      	str	r3, [r2, #12]
		
			State = SUCCES ; 
 80002a6:	2302      	movs	r3, #2
 80002a8:	73fb      	strb	r3, [r7, #15]
			break  ; 
 80002aa:	e00e      	b.n	80002ca <MGPIO_u8SetPortValue_L+0x52>
		case GPIO_PORTB :
			GPIO_B->GPIO_ODR = Copy_u8Value ;
 80002ac:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <MGPIO_u8SetPortValue_L+0x64>)
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	60d3      	str	r3, [r2, #12]
			State = SUCCES ; 
 80002b2:	2302      	movs	r3, #2
 80002b4:	73fb      	strb	r3, [r7, #15]
			break  ; 
 80002b6:	e008      	b.n	80002ca <MGPIO_u8SetPortValue_L+0x52>
		case GPIO_PORTC :
			GPIO_C->GPIO_ODR = Copy_u8Value ;
 80002b8:	4a09      	ldr	r2, [pc, #36]	; (80002e0 <MGPIO_u8SetPortValue_L+0x68>)
 80002ba:	79bb      	ldrb	r3, [r7, #6]
 80002bc:	60d3      	str	r3, [r2, #12]
			State = SUCCES ; 
 80002be:	2302      	movs	r3, #2
 80002c0:	73fb      	strb	r3, [r7, #15]
		
			break  ; 
 80002c2:	e002      	b.n	80002ca <MGPIO_u8SetPortValue_L+0x52>
		default : 
			State = FAILIUR ;
 80002c4:	2303      	movs	r3, #3
 80002c6:	73fb      	strb	r3, [r7, #15]
			break ; 
 80002c8:	bf00      	nop
	}
	return State ;
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40010800 	.word	0x40010800
 80002dc:	40010c00 	.word	0x40010c00
 80002e0:	40011000 	.word	0x40011000

080002e4 <MGPIO_enSetPinDirection>:

  
  

ErrorState_t MGPIO_enSetPinDirection(GPIO_PIN_t Copy_enPIN,u8 Copy_u8Mode)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	ErrorState_t Local_enStatus=SUCCES;
 80002f4:	2302      	movs	r3, #2
 80002f6:	73fb      	strb	r3, [r7, #15]
	u8 local_port = Copy_enPIN/100;
 80002f8:	88fb      	ldrh	r3, [r7, #6]
 80002fa:	4a6c      	ldr	r2, [pc, #432]	; (80004ac <MGPIO_enSetPinDirection+0x1c8>)
 80002fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000300:	095b      	lsrs	r3, r3, #5
 8000302:	b29b      	uxth	r3, r3
 8000304:	73bb      	strb	r3, [r7, #14]
	u8 local_pin =  Copy_enPIN%100 ;
 8000306:	88fb      	ldrh	r3, [r7, #6]
 8000308:	4a68      	ldr	r2, [pc, #416]	; (80004ac <MGPIO_enSetPinDirection+0x1c8>)
 800030a:	fba2 1203 	umull	r1, r2, r2, r3
 800030e:	0952      	lsrs	r2, r2, #5
 8000310:	2164      	movs	r1, #100	; 0x64
 8000312:	fb01 f202 	mul.w	r2, r1, r2
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	b29b      	uxth	r3, r3
 800031a:	737b      	strb	r3, [r7, #13]


	switch (local_port)
 800031c:	7bbb      	ldrb	r3, [r7, #14]
 800031e:	2b03      	cmp	r3, #3
 8000320:	d07f      	beq.n	8000422 <MGPIO_enSetPinDirection+0x13e>
 8000322:	2b03      	cmp	r3, #3
 8000324:	f300 80b9 	bgt.w	800049a <MGPIO_enSetPinDirection+0x1b6>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d002      	beq.n	8000332 <MGPIO_enSetPinDirection+0x4e>
 800032c:	2b02      	cmp	r3, #2
 800032e:	d03c      	beq.n	80003aa <MGPIO_enSetPinDirection+0xc6>
 8000330:	e0b3      	b.n	800049a <MGPIO_enSetPinDirection+0x1b6>
	{
	case  GPIO_PORTA:
		if(local_pin<=GPIO_u8f_REG_LEN)
 8000332:	7b7b      	ldrb	r3, [r7, #13]
 8000334:	2b07      	cmp	r3, #7
 8000336:	d817      	bhi.n	8000368 <MGPIO_enSetPinDirection+0x84>
		{
			GPIO_A->GPIO_CRL&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000338:	4b5d      	ldr	r3, [pc, #372]	; (80004b0 <MGPIO_enSetPinDirection+0x1cc>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	7b7a      	ldrb	r2, [r7, #13]
 800033e:	0092      	lsls	r2, r2, #2
 8000340:	210f      	movs	r1, #15
 8000342:	fa01 f202 	lsl.w	r2, r1, r2
 8000346:	43d2      	mvns	r2, r2
 8000348:	4611      	mov	r1, r2
 800034a:	4a59      	ldr	r2, [pc, #356]	; (80004b0 <MGPIO_enSetPinDirection+0x1cc>)
 800034c:	400b      	ands	r3, r1
 800034e:	6013      	str	r3, [r2, #0]
			GPIO_A->GPIO_CRL|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000350:	4b57      	ldr	r3, [pc, #348]	; (80004b0 <MGPIO_enSetPinDirection+0x1cc>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	7979      	ldrb	r1, [r7, #5]
 8000356:	7b7a      	ldrb	r2, [r7, #13]
 8000358:	0092      	lsls	r2, r2, #2
 800035a:	fa01 f202 	lsl.w	r2, r1, r2
 800035e:	4611      	mov	r1, r2
 8000360:	4a53      	ldr	r2, [pc, #332]	; (80004b0 <MGPIO_enSetPinDirection+0x1cc>)
 8000362:	430b      	orrs	r3, r1
 8000364:	6013      	str	r3, [r2, #0]
		}
		else
		{
			Local_enStatus=OUT_OF_RANGE;
		}
		break;
 8000366:	e09b      	b.n	80004a0 <MGPIO_enSetPinDirection+0x1bc>
		else if(local_pin<=GPIO_u8L_REG_LEN)
 8000368:	7b7b      	ldrb	r3, [r7, #13]
 800036a:	2b0f      	cmp	r3, #15
 800036c:	d81a      	bhi.n	80003a4 <MGPIO_enSetPinDirection+0xc0>
			local_pin=local_pin-GPIO_u8OFSET;
 800036e:	7b7b      	ldrb	r3, [r7, #13]
 8000370:	3b08      	subs	r3, #8
 8000372:	737b      	strb	r3, [r7, #13]
			GPIO_A->GPIO_CRH&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000374:	4b4e      	ldr	r3, [pc, #312]	; (80004b0 <MGPIO_enSetPinDirection+0x1cc>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	7b7a      	ldrb	r2, [r7, #13]
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	210f      	movs	r1, #15
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	43d2      	mvns	r2, r2
 8000384:	4611      	mov	r1, r2
 8000386:	4a4a      	ldr	r2, [pc, #296]	; (80004b0 <MGPIO_enSetPinDirection+0x1cc>)
 8000388:	400b      	ands	r3, r1
 800038a:	6053      	str	r3, [r2, #4]
			GPIO_A->GPIO_CRH|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 800038c:	4b48      	ldr	r3, [pc, #288]	; (80004b0 <MGPIO_enSetPinDirection+0x1cc>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	7979      	ldrb	r1, [r7, #5]
 8000392:	7b7a      	ldrb	r2, [r7, #13]
 8000394:	0092      	lsls	r2, r2, #2
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	4611      	mov	r1, r2
 800039c:	4a44      	ldr	r2, [pc, #272]	; (80004b0 <MGPIO_enSetPinDirection+0x1cc>)
 800039e:	430b      	orrs	r3, r1
 80003a0:	6053      	str	r3, [r2, #4]
		break;
 80003a2:	e07d      	b.n	80004a0 <MGPIO_enSetPinDirection+0x1bc>
			Local_enStatus=OUT_OF_RANGE;
 80003a4:	2300      	movs	r3, #0
 80003a6:	73fb      	strb	r3, [r7, #15]
		break;
 80003a8:	e07a      	b.n	80004a0 <MGPIO_enSetPinDirection+0x1bc>
		case  GPIO_PORTB:
			if(local_pin<=GPIO_u8f_REG_LEN)
 80003aa:	7b7b      	ldrb	r3, [r7, #13]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	d817      	bhi.n	80003e0 <MGPIO_enSetPinDirection+0xfc>
					{
						GPIO_B->GPIO_CRL&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 80003b0:	4b40      	ldr	r3, [pc, #256]	; (80004b4 <MGPIO_enSetPinDirection+0x1d0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	7b7a      	ldrb	r2, [r7, #13]
 80003b6:	0092      	lsls	r2, r2, #2
 80003b8:	210f      	movs	r1, #15
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	43d2      	mvns	r2, r2
 80003c0:	4611      	mov	r1, r2
 80003c2:	4a3c      	ldr	r2, [pc, #240]	; (80004b4 <MGPIO_enSetPinDirection+0x1d0>)
 80003c4:	400b      	ands	r3, r1
 80003c6:	6013      	str	r3, [r2, #0]
						GPIO_B->GPIO_CRL|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 80003c8:	4b3a      	ldr	r3, [pc, #232]	; (80004b4 <MGPIO_enSetPinDirection+0x1d0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	7979      	ldrb	r1, [r7, #5]
 80003ce:	7b7a      	ldrb	r2, [r7, #13]
 80003d0:	0092      	lsls	r2, r2, #2
 80003d2:	fa01 f202 	lsl.w	r2, r1, r2
 80003d6:	4611      	mov	r1, r2
 80003d8:	4a36      	ldr	r2, [pc, #216]	; (80004b4 <MGPIO_enSetPinDirection+0x1d0>)
 80003da:	430b      	orrs	r3, r1
 80003dc:	6013      	str	r3, [r2, #0]
					}
					else
					{
						Local_enStatus=OUT_OF_RANGE;
					}
		break;
 80003de:	e05f      	b.n	80004a0 <MGPIO_enSetPinDirection+0x1bc>
					else if(local_pin<=GPIO_u8L_REG_LEN)
 80003e0:	7b7b      	ldrb	r3, [r7, #13]
 80003e2:	2b0f      	cmp	r3, #15
 80003e4:	d81a      	bhi.n	800041c <MGPIO_enSetPinDirection+0x138>
						local_pin=local_pin-GPIO_u8OFSET;
 80003e6:	7b7b      	ldrb	r3, [r7, #13]
 80003e8:	3b08      	subs	r3, #8
 80003ea:	737b      	strb	r3, [r7, #13]
						GPIO_B->GPIO_CRH&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 80003ec:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <MGPIO_enSetPinDirection+0x1d0>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	7b7a      	ldrb	r2, [r7, #13]
 80003f2:	0092      	lsls	r2, r2, #2
 80003f4:	210f      	movs	r1, #15
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	43d2      	mvns	r2, r2
 80003fc:	4611      	mov	r1, r2
 80003fe:	4a2d      	ldr	r2, [pc, #180]	; (80004b4 <MGPIO_enSetPinDirection+0x1d0>)
 8000400:	400b      	ands	r3, r1
 8000402:	6053      	str	r3, [r2, #4]
						GPIO_B->GPIO_CRH|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000404:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <MGPIO_enSetPinDirection+0x1d0>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	7979      	ldrb	r1, [r7, #5]
 800040a:	7b7a      	ldrb	r2, [r7, #13]
 800040c:	0092      	lsls	r2, r2, #2
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	4611      	mov	r1, r2
 8000414:	4a27      	ldr	r2, [pc, #156]	; (80004b4 <MGPIO_enSetPinDirection+0x1d0>)
 8000416:	430b      	orrs	r3, r1
 8000418:	6053      	str	r3, [r2, #4]
		break;
 800041a:	e041      	b.n	80004a0 <MGPIO_enSetPinDirection+0x1bc>
						Local_enStatus=OUT_OF_RANGE;
 800041c:	2300      	movs	r3, #0
 800041e:	73fb      	strb	r3, [r7, #15]
		break;
 8000420:	e03e      	b.n	80004a0 <MGPIO_enSetPinDirection+0x1bc>
		case  GPIO_PORTC:
			if(local_pin<=GPIO_u8f_REG_LEN)
 8000422:	7b7b      	ldrb	r3, [r7, #13]
 8000424:	2b07      	cmp	r3, #7
 8000426:	d817      	bhi.n	8000458 <MGPIO_enSetPinDirection+0x174>
					{
						GPIO_C->GPIO_CRL&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000428:	4b23      	ldr	r3, [pc, #140]	; (80004b8 <MGPIO_enSetPinDirection+0x1d4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	7b7a      	ldrb	r2, [r7, #13]
 800042e:	0092      	lsls	r2, r2, #2
 8000430:	210f      	movs	r1, #15
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	43d2      	mvns	r2, r2
 8000438:	4611      	mov	r1, r2
 800043a:	4a1f      	ldr	r2, [pc, #124]	; (80004b8 <MGPIO_enSetPinDirection+0x1d4>)
 800043c:	400b      	ands	r3, r1
 800043e:	6013      	str	r3, [r2, #0]
						GPIO_C->GPIO_CRL|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <MGPIO_enSetPinDirection+0x1d4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	7979      	ldrb	r1, [r7, #5]
 8000446:	7b7a      	ldrb	r2, [r7, #13]
 8000448:	0092      	lsls	r2, r2, #2
 800044a:	fa01 f202 	lsl.w	r2, r1, r2
 800044e:	4611      	mov	r1, r2
 8000450:	4a19      	ldr	r2, [pc, #100]	; (80004b8 <MGPIO_enSetPinDirection+0x1d4>)
 8000452:	430b      	orrs	r3, r1
 8000454:	6013      	str	r3, [r2, #0]
					}
					else
					{
						Local_enStatus=OUT_OF_RANGE;
					}
		break;
 8000456:	e023      	b.n	80004a0 <MGPIO_enSetPinDirection+0x1bc>
					else if(local_pin<=GPIO_u8L_REG_LEN)
 8000458:	7b7b      	ldrb	r3, [r7, #13]
 800045a:	2b0f      	cmp	r3, #15
 800045c:	d81a      	bhi.n	8000494 <MGPIO_enSetPinDirection+0x1b0>
						local_pin=local_pin-GPIO_u8OFSET;
 800045e:	7b7b      	ldrb	r3, [r7, #13]
 8000460:	3b08      	subs	r3, #8
 8000462:	737b      	strb	r3, [r7, #13]
						GPIO_C->GPIO_CRH&=~((GPIO_u8CLR_MASK)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MGPIO_enSetPinDirection+0x1d4>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	7b7a      	ldrb	r2, [r7, #13]
 800046a:	0092      	lsls	r2, r2, #2
 800046c:	210f      	movs	r1, #15
 800046e:	fa01 f202 	lsl.w	r2, r1, r2
 8000472:	43d2      	mvns	r2, r2
 8000474:	4611      	mov	r1, r2
 8000476:	4a10      	ldr	r2, [pc, #64]	; (80004b8 <MGPIO_enSetPinDirection+0x1d4>)
 8000478:	400b      	ands	r3, r1
 800047a:	6053      	str	r3, [r2, #4]
						GPIO_C->GPIO_CRH|=((Copy_u8Mode)<<(local_pin*GPIO_u8PIN_REG_SIZE));
 800047c:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MGPIO_enSetPinDirection+0x1d4>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	7979      	ldrb	r1, [r7, #5]
 8000482:	7b7a      	ldrb	r2, [r7, #13]
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <MGPIO_enSetPinDirection+0x1d4>)
 800048e:	430b      	orrs	r3, r1
 8000490:	6053      	str	r3, [r2, #4]
		break;
 8000492:	e005      	b.n	80004a0 <MGPIO_enSetPinDirection+0x1bc>
						Local_enStatus=OUT_OF_RANGE;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]
		break;
 8000498:	e002      	b.n	80004a0 <MGPIO_enSetPinDirection+0x1bc>
	
	default:
	Local_enStatus=OUT_OF_RANGE;
 800049a:	2300      	movs	r3, #0
 800049c:	73fb      	strb	r3, [r7, #15]
		break;
 800049e:	bf00      	nop
	}

 return Local_enStatus;
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	51eb851f 	.word	0x51eb851f
 80004b0:	40010800 	.word	0x40010800
 80004b4:	40010c00 	.word	0x40010c00
 80004b8:	40011000 	.word	0x40011000

080004bc <RCC_voidInitSystemClock>:
#include "MRCC_priv.h"
#include "MRCC_config.h"
#include "MRCC_int.h"

void RCC_voidInitSystemClock(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
#if RCC_u8CLK_TYPE==RCC_u8HSE_CRYSTAL
	RCC->RCC_CR=0x00010080;
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <RCC_voidInitSystemClock+0x14>)
 80004c2:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <RCC_voidInitSystemClock+0x18>)
 80004c4:	601a      	str	r2, [r3, #0]
	//RCC->RCC_CR = 0x00010080;
#else
	#error("You choosed wrong Clock Type")
#endif

}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	00010080 	.word	0x00010080

080004d8 <RCC_voidEnablePeriphralCLK>:

ErrorState_t RCC_voidEnablePeriphralCLK(PeriphralBusId_t Copy_enPeriphralId)
{	
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8BusID =Copy_enPeriphralId/100;
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	4a25      	ldr	r2, [pc, #148]	; (800057c <RCC_voidEnablePeriphralCLK+0xa4>)
 80004e6:	fba2 2303 	umull	r2, r3, r2, r3
 80004ea:	095b      	lsrs	r3, r3, #5
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	73bb      	strb	r3, [r7, #14]
	u8 Local_u8PeriphralID =Copy_enPeriphralId % 100;
 80004f0:	88fb      	ldrh	r3, [r7, #6]
 80004f2:	4a22      	ldr	r2, [pc, #136]	; (800057c <RCC_voidEnablePeriphralCLK+0xa4>)
 80004f4:	fba2 1203 	umull	r1, r2, r2, r3
 80004f8:	0952      	lsrs	r2, r2, #5
 80004fa:	2164      	movs	r1, #100	; 0x64
 80004fc:	fb01 f202 	mul.w	r2, r1, r2
 8000500:	1a9b      	subs	r3, r3, r2
 8000502:	b29b      	uxth	r3, r3
 8000504:	737b      	strb	r3, [r7, #13]

	ErrorState_t Local_enErrorState=SUCCES;
 8000506:	2302      	movs	r3, #2
 8000508:	73fb      	strb	r3, [r7, #15]

	if(Local_u8PeriphralID  <= 31) //unsigned
 800050a:	7b7b      	ldrb	r3, [r7, #13]
 800050c:	2b1f      	cmp	r3, #31
 800050e:	d82d      	bhi.n	800056c <RCC_voidEnablePeriphralCLK+0x94>
	{
		switch(Local_u8BusID)
 8000510:	7bbb      	ldrb	r3, [r7, #14]
 8000512:	2b03      	cmp	r3, #3
 8000514:	d01c      	beq.n	8000550 <RCC_voidEnablePeriphralCLK+0x78>
 8000516:	2b03      	cmp	r3, #3
 8000518:	dc25      	bgt.n	8000566 <RCC_voidEnablePeriphralCLK+0x8e>
 800051a:	2b01      	cmp	r3, #1
 800051c:	d002      	beq.n	8000524 <RCC_voidEnablePeriphralCLK+0x4c>
 800051e:	2b02      	cmp	r3, #2
 8000520:	d00b      	beq.n	800053a <RCC_voidEnablePeriphralCLK+0x62>
 8000522:	e020      	b.n	8000566 <RCC_voidEnablePeriphralCLK+0x8e>
		{
			case RCC_u8AHB: SET_BIT(RCC->RCC_AHBENR,Local_u8PeriphralID) ;    	
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	7b7a      	ldrb	r2, [r7, #13]
 800052a:	2101      	movs	r1, #1
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a13      	ldr	r2, [pc, #76]	; (8000580 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000534:	430b      	orrs	r3, r1
 8000536:	6153      	str	r3, [r2, #20]
			break;
 8000538:	e01a      	b.n	8000570 <RCC_voidEnablePeriphralCLK+0x98>

			case RCC_u8APB2:SET_BIT(RCC->RCC_APB2ENR,Local_u8PeriphralID) ;	
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <RCC_voidEnablePeriphralCLK+0xa8>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	7b7a      	ldrb	r2, [r7, #13]
 8000540:	2101      	movs	r1, #1
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <RCC_voidEnablePeriphralCLK+0xa8>)
 800054a:	430b      	orrs	r3, r1
 800054c:	6193      	str	r3, [r2, #24]
			break;
 800054e:	e00f      	b.n	8000570 <RCC_voidEnablePeriphralCLK+0x98>

			case RCC_u8APB1: SET_BIT(RCC->RCC_APB1ENR,Local_u8PeriphralID) ;	
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000552:	69db      	ldr	r3, [r3, #28]
 8000554:	7b7a      	ldrb	r2, [r7, #13]
 8000556:	2101      	movs	r1, #1
 8000558:	fa01 f202 	lsl.w	r2, r1, r2
 800055c:	4611      	mov	r1, r2
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000560:	430b      	orrs	r3, r1
 8000562:	61d3      	str	r3, [r2, #28]
			break;
 8000564:	e004      	b.n	8000570 <RCC_voidEnablePeriphralCLK+0x98>
			
			
			
			default:
			Local_enErrorState=OUT_OF_RANGE;
 8000566:	2300      	movs	r3, #0
 8000568:	73fb      	strb	r3, [r7, #15]
			break;
 800056a:	e001      	b.n	8000570 <RCC_voidEnablePeriphralCLK+0x98>
		}

	}
	else
	{
		Local_enErrorState=OUT_OF_RANGE;
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]

	}

	return Local_enErrorState;
 8000570:	7bfb      	ldrb	r3, [r7, #15]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	51eb851f 	.word	0x51eb851f
 8000580:	40021000 	.word	0x40021000

08000584 <MSTK_enInit>:
static void (*CallBackFun)(void)=NULL;

static u8 SG_u8Interval_Mode;

ErrorState_t MSTK_enInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	ErrorState_t Local_Status=SUCCES;
 800058a:	2302      	movs	r3, #2
 800058c:	71fb      	strb	r3, [r7, #7]
#if CLOCK_MODE==AHB_OVER_8_MODE

	//SET_BIT(STK_REG->STK_CTRL,ENABLE_BIT);
	CLR_BIT(STK_REG->STK_CTRL,CLKSOURCE_BIT);
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MSTK_enInit+0x24>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <MSTK_enInit+0x24>)
 8000594:	f023 0304 	bic.w	r3, r3, #4
 8000598:	6013      	str	r3, [r2, #0]

#else
 #error("Wrong AHB MODE")
#endif

}
 800059a:	bf00      	nop
 800059c:	4618      	mov	r0, r3
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000e010 	.word	0xe000e010

080005ac <MSTK_enSetBusyWait>:
ErrorState_t MSTK_enSetBusyWait(u32 copy_u8Ticks)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_Status=SUCCES;
 80005b4:	2302      	movs	r3, #2
 80005b6:	73fb      	strb	r3, [r7, #15]

	u32 Local_Ticksin_ms=copy_u8Ticks*1000;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005be:	fb02 f303 	mul.w	r3, r2, r3
 80005c2:	60bb      	str	r3, [r7, #8]
	//enable Timer
	if(Local_Ticksin_ms<=MAX_LOAD_VALUE){
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005ca:	d21b      	bcs.n	8000604 <MSTK_enSetBusyWait+0x58>
	SET_BIT(STK_REG->STK_CTRL,ENABLE_BIT);//Enable bit
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MSTK_enSetBusyWait+0x68>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <MSTK_enSetBusyWait+0x68>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6013      	str	r3, [r2, #0]
	STK_REG->STK_LOAD=Local_Ticksin_ms;//set value to delay
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <MSTK_enSetBusyWait+0x68>)
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	6053      	str	r3, [r2, #4]
	while(!GET_BIT(STK_REG->STK_CTRL,COUNTFLAG));
 80005de:	bf00      	nop
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MSTK_enSetBusyWait+0x68>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	08db      	lsrs	r3, r3, #3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0fa      	beq.n	80005e0 <MSTK_enSetBusyWait+0x34>
	//disable Timer
	CLR_BIT(STK_REG->STK_CTRL,ENABLE_BIT);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MSTK_enSetBusyWait+0x68>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <MSTK_enSetBusyWait+0x68>)
 80005f0:	f023 0301 	bic.w	r3, r3, #1
 80005f4:	6013      	str	r3, [r2, #0]
	STK_REG->STK_LOAD=0;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MSTK_enSetBusyWait+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
	STK_REG->STK_VAL=0;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <MSTK_enSetBusyWait+0x68>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	e001      	b.n	8000608 <MSTK_enSetBusyWait+0x5c>
	}
	else
	{
		 Local_Status=FAILIUR;
 8000604:	2303      	movs	r3, #3
 8000606:	73fb      	strb	r3, [r7, #15]
	}


return Local_Status;
 8000608:	7bfb      	ldrb	r3, [r7, #15]
	}
 800060a:	4618      	mov	r0, r3
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	e000e010 	.word	0xe000e010

08000618 <SysTick_Handler>:
	}
return Local_Status;
}

void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

	CallBackFun();
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <SysTick_Handler+0x3c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4798      	blx	r3

	if(SG_u8Interval_Mode==STK_MODE_SINGLE)
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <SysTick_Handler+0x40>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d111      	bne.n	800064e <SysTick_Handler+0x36>
	{
		CLR_BIT(STK_REG->STK_CTRL,ENABLE_BIT);
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <SysTick_Handler+0x44>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0b      	ldr	r2, [pc, #44]	; (800065c <SysTick_Handler+0x44>)
 8000630:	f023 0301 	bic.w	r3, r3, #1
 8000634:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK_REG->STK_CTRL,TICKINT_BIT);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <SysTick_Handler+0x44>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <SysTick_Handler+0x44>)
 800063c:	f023 0302 	bic.w	r3, r3, #2
 8000640:	6013      	str	r3, [r2, #0]
		STK_REG->STK_LOAD=0;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <SysTick_Handler+0x44>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
		STK_REG->STK_VAL=0;
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <SysTick_Handler+0x44>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]


	}


}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000001c 	.word	0x2000001c
 8000658:	20000020 	.word	0x20000020
 800065c:	e000e010 	.word	0xe000e010

08000660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000662:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000664:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068e:	f000 f811 	bl	80006b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff fd6d 	bl	8000170 <main>

08000696 <LoopForever>:

LoopForever:
    b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   r0, =_estack
 8000698:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006a4:	0800072c 	.word	0x0800072c
  ldr r2, =_sbss
 80006a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006ac:	20000024 	.word	0x20000024

080006b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_2_IRQHandler>
	...

080006b4 <__libc_init_array>:
 80006b4:	b570      	push	{r4, r5, r6, lr}
 80006b6:	2600      	movs	r6, #0
 80006b8:	4d0c      	ldr	r5, [pc, #48]	; (80006ec <__libc_init_array+0x38>)
 80006ba:	4c0d      	ldr	r4, [pc, #52]	; (80006f0 <__libc_init_array+0x3c>)
 80006bc:	1b64      	subs	r4, r4, r5
 80006be:	10a4      	asrs	r4, r4, #2
 80006c0:	42a6      	cmp	r6, r4
 80006c2:	d109      	bne.n	80006d8 <__libc_init_array+0x24>
 80006c4:	f000 f81a 	bl	80006fc <_init>
 80006c8:	2600      	movs	r6, #0
 80006ca:	4d0a      	ldr	r5, [pc, #40]	; (80006f4 <__libc_init_array+0x40>)
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <__libc_init_array+0x44>)
 80006ce:	1b64      	subs	r4, r4, r5
 80006d0:	10a4      	asrs	r4, r4, #2
 80006d2:	42a6      	cmp	r6, r4
 80006d4:	d105      	bne.n	80006e2 <__libc_init_array+0x2e>
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006dc:	4798      	blx	r3
 80006de:	3601      	adds	r6, #1
 80006e0:	e7ee      	b.n	80006c0 <__libc_init_array+0xc>
 80006e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e6:	4798      	blx	r3
 80006e8:	3601      	adds	r6, #1
 80006ea:	e7f2      	b.n	80006d2 <__libc_init_array+0x1e>
 80006ec:	08000724 	.word	0x08000724
 80006f0:	08000724 	.word	0x08000724
 80006f4:	08000724 	.word	0x08000724
 80006f8:	08000728 	.word	0x08000728

080006fc <_init>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr

08000708 <_fini>:
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070a:	bf00      	nop
 800070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070e:	bc08      	pop	{r3}
 8000710:	469e      	mov	lr, r3
 8000712:	4770      	bx	lr
